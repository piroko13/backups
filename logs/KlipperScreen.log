2024-04-20 02:55:51,502 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}\nSTATUS_PRINTING'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'color_order': 'RGB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1.0, 0.0, 0.0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect SKR_screen_button_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (1,2)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect SKR_screen_button_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (1,2)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect SKR_screen_button_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (1,2)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect SKR_screen_button_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (1,2)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect SKR_screen_button_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (1,2)', 'layers': '\nbreathing 3 1 top (1.0, 0.0, 0.0)'}, 'led_effect SKR_screen_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (3)', 'layers': '\nstatic 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect SKR_screen_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (3)', 'layers': '\nstatic 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect SKR_screen_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (3)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect SKR_screen_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (3)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect SKR_screen_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (3)', 'layers': '\nstatic 3 1 top (1.0, 0.0, 0.0)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_SKR_screen_button_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (1,2)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_SKR_screen_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (3)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro set_SKR_screen_button_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_button_leds'}, 'gcode_macro set_SKR_screen_button_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_button_leds STOP=1'}, 'gcode_macro set_SKR_screen_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_leds'}, 'gcode_macro set_SKR_screen_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready\nSET_LED_EFFECT EFFECT=SKR_screen_button_part_ready\nSET_LED_EFFECT EFFECT=SKR_screen_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_busy\nSET_LED_EFFECT EFFECT=sb_logo_busy\nSET_LED_EFFECT EFFECT=SKR_screen_button_busy\nSET_LED_EFFECT EFFECT=SKR_screen_busy'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating\nSET_LED_EFFECT EFFECT=SKR_screen_button_heating\nSET_LED_EFFECT EFFECT=SKR_screen_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling\nSET_LED_EFFECT EFFECT=SKR_screen_cooling\nSET_LED_EFFECT EFFECT=SKR_screen_button_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing\nSET_LED_EFFECT EFFECT=SKR_screen_button_printing\nSET_LED_EFFECT EFFECT=SKR_screen_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=1.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'filament_switch_sensor switch_sensor': {'switch_pin': '^PC15', 'pause_on_runout': 'False', 'runout_gcode': '\nPAUSE\nM117 Filament switch runout', 'insert_gcode': '\nM117 Filament switch inserted'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC12', 'detection_length': '3.2', 'extruder': 'extruder', 'pause_on_runout': 'False', 'runout_gcode': '\nPAUSE\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM109 S{150}\nM117 Waiting until cooldown to shutdown\nM109 S{45}\nSET_PIN PIN=relay VALUE=0'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}\nSTATUS_PRINTING', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect skr_screen_button_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:SKR_screen (1,2)'}, 'led_effect skr_screen_button_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:SKR_screen (1,2)'}, 'led_effect skr_screen_button_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:SKR_screen (1,2)'}, 'led_effect skr_screen_button_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:SKR_screen (1,2)'}, 'led_effect skr_screen_button_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:SKR_screen (1,2)'}, 'led_effect skr_screen_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:SKR_screen (3)'}, 'led_effect skr_screen_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:SKR_screen (3)'}, 'led_effect skr_screen_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:SKR_screen (3)'}, 'led_effect skr_screen_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:SKR_screen (3)'}, 'led_effect skr_screen_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:SKR_screen (3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect set_skr_screen_button_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:SKR_screen (1,2)'}, 'led_effect set_skr_screen_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:SKR_screen (3)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_skr_screen_button_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_button_leds', 'description': 'G-Code macro'}, 'gcode_macro set_skr_screen_button_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_button_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_skr_screen_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_leds', 'description': 'G-Code macro'}, 'gcode_macro set_skr_screen_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready\nSET_LED_EFFECT EFFECT=SKR_screen_button_part_ready\nSET_LED_EFFECT EFFECT=SKR_screen_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_busy\nSET_LED_EFFECT EFFECT=sb_logo_busy\nSET_LED_EFFECT EFFECT=SKR_screen_button_busy\nSET_LED_EFFECT EFFECT=SKR_screen_busy', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating\nSET_LED_EFFECT EFFECT=SKR_screen_button_heating\nSET_LED_EFFECT EFFECT=SKR_screen_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling\nSET_LED_EFFECT EFFECT=SKR_screen_cooling\nSET_LED_EFFECT EFFECT=SKR_screen_button_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing\nSET_LED_EFFECT EFFECT=SKR_screen_button_printing\nSET_LED_EFFECT EFFECT=SKR_screen_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=1.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'filament_switch_sensor switch_sensor': {'switch_pin': '^PC15', 'pause_on_runout': False, 'runout_gcode': '\nPAUSE\nM117 Filament switch runout', 'insert_gcode': '\nM117 Filament switch inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC12', 'extruder': 'extruder', 'detection_length': 3.2, 'pause_on_runout': False, 'runout_gcode': '\nPAUSE\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM109 S{150}\nM117 Waiting until cooldown to shutdown\nM109 S{45}\nSET_PIN PIN=relay VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-20 02:55:51,509 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-20 02:55:51,512 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-20 02:55:51,512 [printer.py:reinit()] - # Extruders: 1
2024-04-20 02:55:51,512 [printer.py:reinit()] - # Temperature devices: 1
2024-04-20 02:55:51,513 [printer.py:reinit()] - # Fans: 3
2024-04-20 02:55:51,513 [printer.py:reinit()] - # Output pins: 1
2024-04-20 02:55:51,513 [printer.py:reinit()] - # Leds: 35
2024-04-20 02:55:51,513 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-20 02:55:51,521 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-20 02:55:51,521 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-5-gd23ca45
2024-04-20 02:55:51,522 [functions.py:log_start()] - Python version: 3.9
2024-04-20 02:55:51,541 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-20 02:55:51,544 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&filament_switch_sensor switch_sensor&filament_motion_sensor encoder_sensor&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-20 02:55:51,928 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-20 02:55:51,928 [screen.py:init_klipper()] - Printer initialized
2024-04-20 02:55:54,275 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-20 02:55:54,275 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 02:55:54,319 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-20 02:55:54,322 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 02:55:54,344 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 02:56:15,387 [base_panel.py:process_update()] - Update complete
2024-04-20 02:56:15,389 [base_panel.py:process_update()] - error trying to show the updater button the dialog might be closed
2024-04-20 02:56:15,394 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-20 02:56:15,394 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-20 02:56:15,396 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-20 02:56:15,396 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-20 02:56:15,404 [screen.py:show_panel()] - Reinitializing panel
2024-04-20 02:56:15,479 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-20 02:56:15,501 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-20 02:56:18,275 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 02:56:18,295 [base_panel.py:set_ks_printer_cfg()] - Titlebar name type: full items: ['MCU', 'pi']
2024-04-20 02:56:18,296 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-20 02:56:18,316 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-20 02:56:18,317 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-20 02:56:18,317 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 02:56:18,338 [printer.py:configure_cameras()] - Cameras: [{'name': 'Logitech', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ca5a12bb-b321-4097-81ea-35079d714b16'}]
2024-04-20 02:56:18,339 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'power', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 02:56:18,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 02:56:20,190 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-20 02:56:20,292 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}\nSTATUS_PRINTING'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'color_order': 'RGB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1.0, 0.0, 0.0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect SKR_screen_button_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (1,2)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect SKR_screen_button_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (1,2)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect SKR_screen_button_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (1,2)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect SKR_screen_button_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (1,2)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect SKR_screen_button_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (1,2)', 'layers': '\nbreathing 3 1 top (1.0, 0.0, 0.0)'}, 'led_effect SKR_screen_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (3)', 'layers': '\nstatic 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect SKR_screen_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (3)', 'layers': '\nstatic 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect SKR_screen_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (3)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect SKR_screen_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (3)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect SKR_screen_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (3)', 'layers': '\nstatic 3 1 top (1.0, 0.0, 0.0)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_SKR_screen_button_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (1,2)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_SKR_screen_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:SKR_screen (3)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro set_SKR_screen_button_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_button_leds'}, 'gcode_macro set_SKR_screen_button_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_button_leds STOP=1'}, 'gcode_macro set_SKR_screen_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_leds'}, 'gcode_macro set_SKR_screen_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready\nSET_LED_EFFECT EFFECT=SKR_screen_button_part_ready\nSET_LED_EFFECT EFFECT=SKR_screen_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_busy\nSET_LED_EFFECT EFFECT=sb_logo_busy\nSET_LED_EFFECT EFFECT=SKR_screen_button_busy\nSET_LED_EFFECT EFFECT=SKR_screen_busy'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating\nSET_LED_EFFECT EFFECT=SKR_screen_button_heating\nSET_LED_EFFECT EFFECT=SKR_screen_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling\nSET_LED_EFFECT EFFECT=SKR_screen_cooling\nSET_LED_EFFECT EFFECT=SKR_screen_button_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing\nSET_LED_EFFECT EFFECT=SKR_screen_button_printing\nSET_LED_EFFECT EFFECT=SKR_screen_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=1.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'filament_switch_sensor switch_sensor': {'switch_pin': '^PC15', 'pause_on_runout': 'False', 'runout_gcode': '\nPAUSE\nM117 Filament switch runout', 'insert_gcode': '\nM117 Filament switch inserted'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC12', 'detection_length': '3.2', 'extruder': 'extruder', 'pause_on_runout': 'False', 'runout_gcode': '\nPAUSE\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM109 S{150}\nM117 Waiting until cooldown to shutdown\nM109 S{45}\nSET_PIN PIN=relay VALUE=0'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}\nSTATUS_PRINTING', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect skr_screen_button_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:SKR_screen (1,2)'}, 'led_effect skr_screen_button_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:SKR_screen (1,2)'}, 'led_effect skr_screen_button_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:SKR_screen (1,2)'}, 'led_effect skr_screen_button_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:SKR_screen (1,2)'}, 'led_effect skr_screen_button_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:SKR_screen (1,2)'}, 'led_effect skr_screen_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:SKR_screen (3)'}, 'led_effect skr_screen_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:SKR_screen (3)'}, 'led_effect skr_screen_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:SKR_screen (3)'}, 'led_effect skr_screen_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:SKR_screen (3)'}, 'led_effect skr_screen_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:SKR_screen (3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect set_skr_screen_button_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:SKR_screen (1,2)'}, 'led_effect set_skr_screen_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:SKR_screen (3)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_skr_screen_button_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_button_leds', 'description': 'G-Code macro'}, 'gcode_macro set_skr_screen_button_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_button_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_skr_screen_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_leds', 'description': 'G-Code macro'}, 'gcode_macro set_skr_screen_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_SKR_screen_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready\nSET_LED_EFFECT EFFECT=SKR_screen_button_part_ready\nSET_LED_EFFECT EFFECT=SKR_screen_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_busy\nSET_LED_EFFECT EFFECT=sb_logo_busy\nSET_LED_EFFECT EFFECT=SKR_screen_button_busy\nSET_LED_EFFECT EFFECT=SKR_screen_busy', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating\nSET_LED_EFFECT EFFECT=SKR_screen_button_heating\nSET_LED_EFFECT EFFECT=SKR_screen_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling\nSET_LED_EFFECT EFFECT=SKR_screen_cooling\nSET_LED_EFFECT EFFECT=SKR_screen_button_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing\nSET_LED_EFFECT EFFECT=SKR_screen_button_printing\nSET_LED_EFFECT EFFECT=SKR_screen_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=1.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'filament_switch_sensor switch_sensor': {'switch_pin': '^PC15', 'pause_on_runout': False, 'runout_gcode': '\nPAUSE\nM117 Filament switch runout', 'insert_gcode': '\nM117 Filament switch inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC12', 'extruder': 'extruder', 'detection_length': 3.2, 'pause_on_runout': False, 'runout_gcode': '\nPAUSE\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM109 S{150}\nM117 Waiting until cooldown to shutdown\nM109 S{45}\nSET_PIN PIN=relay VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-20 02:56:20,301 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-20 02:56:20,304 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746-dirty
2024-04-20 02:56:20,306 [printer.py:reinit()] - # Extruders: 1
2024-04-20 02:56:20,306 [printer.py:reinit()] - # Temperature devices: 1
2024-04-20 02:56:20,307 [printer.py:reinit()] - # Fans: 3
2024-04-20 02:56:20,307 [printer.py:reinit()] - # Output pins: 1
2024-04-20 02:56:20,308 [printer.py:reinit()] - # Leds: 35
2024-04-20 02:56:20,308 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-20 02:56:20,345 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-20 02:56:20,348 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&filament_switch_sensor switch_sensor&filament_motion_sensor encoder_sensor&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-20 02:56:20,658 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-20 02:56:20,658 [screen.py:init_klipper()] - Printer initialized
2024-04-20 02:56:20,659 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-20 02:56:20,660 [printer.py:change_state()] - Adding callback for state: startup
2024-04-20 02:56:23,147 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-20 02:56:23,148 [printer.py:change_state()] - Adding callback for state: ready
2024-04-20 02:56:23,151 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-20 02:56:23,156 [screen.py:show_panel()] - Reinitializing panel
2024-04-20 02:56:23,307 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-20 02:56:23,341 [main_menu.py:add_device()] - Adding device: extruder
2024-04-20 02:56:23,354 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-20 02:56:23,419 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 02:56:23,421 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 02:56:23,461 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-20 02:56:23,464 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 02:56:23,486 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 02:56:24,136 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
