2024-04-03 05:31:43,461 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.0', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro M300': {'description': 'Beeper macro', 'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0'}, 'gcode_macro BEEP': {'gcode': '\nM300 P100'}, 'gcode_macro BEEP_TWICE': {'gcode': '\nM300 P100\nM300 P100'}, 'gcode_macro BEEP_LONG': {'gcode': '\nM300 P500'}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.0}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro m300': {'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0', 'description': 'Beeper macro'}, 'gcode_macro beep': {'gcode': '\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_twice': {'gcode': '\nM300 P100\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_long': {'gcode': '\nM300 P500', 'description': 'G-Code macro'}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-03 05:31:43,469 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-03 05:31:43,472 [printer.py:reinit()] - Klipper version: v0.12.0-138-g5e280680-dirty
2024-04-03 05:31:43,472 [printer.py:reinit()] - # Extruders: 1
2024-04-03 05:31:43,473 [printer.py:reinit()] - # Temperature devices: 1
2024-04-03 05:31:43,474 [printer.py:reinit()] - # Fans: 3
2024-04-03 05:31:43,474 [printer.py:reinit()] - # Output pins: 1
2024-04-03 05:31:43,476 [printer.py:reinit()] - # Leds: 22
2024-04-03 05:31:43,476 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-03 05:31:43,489 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-03 05:31:43,490 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-74-g9e42576
2024-04-03 05:31:43,491 [functions.py:log_start()] - Python version: 3.9
2024-04-03 05:31:43,529 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-03 05:31:43,535 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-03 05:31:43,850 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-03 05:31:43,851 [screen.py:init_klipper()] - Printer initialized
2024-04-03 05:31:47,273 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-03 05:31:47,274 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-03 05:31:47,311 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-03 05:31:47,313 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-03 05:31:47,338 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-03 05:32:20,817 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'off', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-03 05:31:38,051 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-03 05:31:38,052 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-74-g9e42576
2024-04-03 05:31:38,052 [functions.py:log_start()] - Python version: 3.9
2024-04-03 05:31:38,678 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-03 05:31:38,682 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2024-04-03 05:31:38,702 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-03 05:31:38,846 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-03 05:31:38,846 [config.py:install_language()] - Using lang en
2024-04-03 05:31:38,874 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-03 05:31:38,877 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-03 05:31:38,883 [screen.py:__init__()] - Screen resolution: 480x320
2024-04-03 05:31:38,886 [KlippyGtk.py:__init__()] - Font size: 11.0 (medium)
                                                                                                                                                                                   2024-04-03 05:31:33,511 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-03 05:31:33,513 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-74-g9e42576
2024-04-03 05:31:33,513 [functions.py:log_start()] - Python version: 3.9
2024-04-03 05:31:34,039 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-03 05:31:34,041 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2024-04-03 05:31:34,105 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-03 05:31:34,305 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-03 05:31:34,306 [config.py:install_language()] - Using lang en
2024-04-03 05:31:34,359 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-03 05:31:34,367 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-03 05:31:34,384 [screen.py:__init__()] - Screen resolution: 480x320
2024-04-03 05:31:34,388 [KlippyGtk.py:__init__()] - Font size: 11.0 (medium)
2024-04-03 05:31:40,130 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-03 05:31:40,175 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-03 05:31:40,190 [screen.py:initial_connection()] - Default printer: None
2024-04-03 05:31:40,283 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-03 05:31:40,284 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-03 05:31:40,418 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-03 05:31:40,443 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-03 05:31:40,444 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 05:31:40,493 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-03 05:31:40,518 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-03 05:31:40,543 [_logging.py:info()] - Websocket connected
2024-04-03 05:31:40,544 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-03 05:31:40,550 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 05:31:40,572 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-03 05:31:40,595 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-03 05:31:40,596 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-03 05:31:40,596 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-03 05:31:40,619 [printer.py:configure_cameras()] - Cameras: []
2024-04-03 05:31:40,620 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'power'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-03 05:31:40,620 [screen.py:init_klipper()] - Klipper not connected
2024-04-03 05:31:44,297 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 05:31:44,315 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'power'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-03 05:31:44,316 [screen.py:init_klipper()] - Klipper not connected
2024-04-03 05:31:47,298 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 05:31:47,319 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'power'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-03 05:31:47,320 [screen.py:init_klipper()] - Klipper not connected
2024-04-03 05:31:50,296 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 05:31:50,316 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'power'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-03 05:31:50,317 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-03 05:31:50,341 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-03 05:31:53,296 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 05:31:53,316 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-03 05:31:53,334 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-03 05:31:53,335 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-03 05:31:53,335 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-03 05:31:53,353 [printer.py:configure_cameras()] - Cameras: []
2024-04-03 05:31:53,354 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'power'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-03 05:31:53,354 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-03 05:31:53,375 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-03 05:31:53,417 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.0', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro M300': {'description': 'Beeper macro', 'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0'}, 'gcode_macro BEEP': {'gcode': '\nM300 P100'}, 'gcode_macro BEEP_TWICE': {'gcode': '\nM300 P100\nM300 P100'}, 'gcode_macro BEEP_LONG': {'gcode': '\nM300 P500'}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.0}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro m300': {'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0', 'description': 'Beeper macro'}, 'gcode_macro beep': {'gcode': '\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_twice': {'gcode': '\nM300 P100\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_long': {'gcode': '\nM300 P500', 'description': 'G-Code macro'}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-03 05:31:53,421 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-03 05:31:53,423 [printer.py:reinit()] - Klipper version: v0.12.0-138-g5e280680-dirty
2024-04-03 05:31:53,424 [printer.py:reinit()] - # Extruders: 1
2024-04-03 05:31:53,424 [printer.py:reinit()] - # Temperature devices: 1
2024-04-03 05:31:53,424 [printer.py:reinit()] - # Fans: 3
2024-04-03 05:31:53,424 [printer.py:reinit()] - # Output pins: 1
2024-04-03 05:31:53,424 [printer.py:reinit()] - # Leds: 22
2024-04-03 05:31:53,425 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-03 05:31:53,453 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-03 05:31:53,456 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-03 05:31:53,779 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-03 05:31:53,779 [screen.py:init_klipper()] - Printer initialized
2024-04-03 05:31:53,780 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-03 05:31:53,780 [printer.py:change_state()] - Adding callback for state: startup
2024-04-03 05:31:55,662 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-03 05:31:55,662 [printer.py:change_state()] - Adding callback for state: ready
2024-04-03 05:31:55,666 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-03 05:31:55,671 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-03 05:31:55,853 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-03 05:31:55,894 [main_menu.py:add_device()] - Adding device: extruder
2024-04-03 05:31:55,911 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-03 05:31:55,985 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-03 05:31:55,987 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-03 05:31:56,008 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-03 05:31:56,128 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-03 05:31:56,129 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-03 05:31:56,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-03 05:31:56,429 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-03 05:32:01,296 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-03 05:32:01,330 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-03 05:32:01,333 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-03 05:32:01,354 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-03 05:32:01,356 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-03 05:32:01,389 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-03 05:32:01,392 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-03 05:32:01,414 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-03 12:32:05,136 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-03 12:32:05,136 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-03 12:32:05,143 [screen.py:_load_panel()] - Loading panel: menu
2024-04-03 12:32:05,561 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-03 12:32:05,622 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-03 12:32:05,632 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-03 12:32:05,648 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-03 12:32:11,377 [screen.py:_load_panel()] - Loading panel: led
2024-04-03 12:32:11,440 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > led
2024-04-03 12:32:13,995 [led.py:color_selector()] - neopixel sb_leds
2024-04-03 12:32:14,013 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/database/item?namespace=mainsail&key=miscellaneous.entries
2024-04-03 12:32:14,041 [KlippyRest.py:_do_request()] - 404 Client Error>>Key miscellaneous in namespace mainsail not found for url>>http://127.0.0.1:7125/server/database/item?namespace=mainsail&key=miscellaneous.entries
2024-04-03 12:32:14,044 [led.py:color_selector()] - Adding preset: off
2024-04-03 12:32:14,047 [led.py:color_selector()] - Adding preset: on
2024-04-03 12:32:16,613 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.0 GREEN=0.0 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:21,832 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.0 GREEN=1.0 BLUE=0.19215686274509805 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:24,430 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.20784313725490197 GREEN=1.0 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:27,675 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.15294117647058825 GREEN=0.0 BLUE=0.1450980392156863 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:32,422 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.11764705882352941 GREEN=0.0 BLUE=0.17647058823529413 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:34,503 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.10588235294117647 GREEN=0.11372549019607843 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:34,517 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.10588235294117647 GREEN=0.07058823529411765 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:34,808 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.10588235294117647 GREEN=0.07058823529411765 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:36,116 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.2549019607843137 GREEN=0.0 BLUE=0.043137254901960784 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:36,266 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=1.0 GREEN=0.0 BLUE=0.0 WHITE=0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:39,090 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.0 GREEN=0.7607843137254902 BLUE=0.058823529411764705 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:39,371 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.0 GREEN=0.6 BLUE=0.058823529411764705 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:39,384 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.0 GREEN=0.47843137254901963 BLUE=0.058823529411764705 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:39,521 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.10588235294117647 GREEN=0.3607843137254902 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:39,534 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.10588235294117647 GREEN=0.23137254901960785 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:39,739 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.0392156862745098 GREEN=0.08627450980392157 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:39,751 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.0392156862745098 GREEN=0.0 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:45,437 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=0.00392156862745098 GREEN=1.0 BLUE=0.0 WHITE=0 SYNC=0 TRANSMIT=1'}
2024-04-03 12:32:47,376 [led.py:color_selector()] - neopixel SKR_screen
2024-04-03 12:32:47,393 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/database/item?namespace=mainsail&key=miscellaneous.entries
2024-04-03 12:32:47,415 [KlippyRest.py:_do_request()] - 404 Client Error>>Key miscellaneous in namespace mainsail not found for url>>http://127.0.0.1:7125/server/database/item?namespace=mainsail&key=miscellaneous.entries
2024-04-03 12:32:47,417 [led.py:color_selector()] - Adding preset: off
2024-04-03 12:32:47,420 [led.py:color_selector()] - Adding preset: on
2024-04-03 12:32:54,124 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-03 12:32:54,216 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-03 12:32:54,290 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-03 12:32:54,300 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-03 12:32:54,317 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-03 12:32:58,328 [screen.py:_load_panel()] - Loading panel: pins
2024-04-03 12:32:58,343 [pins.py:add_pin()] - Adding pin: output_pin relay
2024-04-03 12:32:58,380 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > pins
2024-04-03 12:32:58,383 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_PIN PIN=relay VALUE=1
2024-04-03 12:33:01,744 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-03 12:33:01,789 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-03 12:33:01,858 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-03 12:33:01,867 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-03 12:33:01,883 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-03 12:33:14,718 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-03 12:33:14,759 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-03 12:33:17,180 [screen.py:_load_panel()] - Loading panel: move
2024-04-03 12:33:17,332 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-03 12:33:22,895 [screen.py:_load_panel()] - Loading panel: menu
2024-04-03 12:33:23,081 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-03 12:33:23,111 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-04-03 12:33:23,117 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-03 12:33:25,686 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-03 12:33:58,202 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-03 12:33:58,245 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-03 12:34:01,767 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-25 F600'}
2024-04-03 12:34:01,772 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-03 12:34:01,787 [screen.py:show_popup_message()] - error: Move out of range: 149.000 120.000 -15.000 [0.000]
2024-04-03 12:34:14,462 [screen_panel.py:load_menu()] - loading menu options
2024-04-03 12:34:18,428 [screen_panel.py:switch_config_option()] - [main] invert_y toggled True
2024-04-03 12:34:18,432 [config.py:save_user_config_options()] - Creating a new config file in /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-03 12:34:22,769 [screen_panel.py:unload_menu()] - self.menu: ['move_menu', 'options_menu']
2024-04-03 12:34:28,496 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-04-03 12:34:28,505 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-03 12:34:38,402 [move.py:change_distance()] - ### Distance 5
2024-04-03 12:34:40,803 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+5 F600'}
2024-04-03 12:34:40,807 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-03 12:34:44,991 [move.py:change_distance()] - ### Distance 10
2024-04-03 12:34:46,311 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+10 F600'}
2024-04-03 12:34:46,315 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-03 12:34:51,737 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=480, height=320)
2024-04-03 12:34:53,497 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-03 12:34:53,498 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2024-04-03 12:35:53,080 [move.py:change_distance()] - ### Distance 1
2024-04-03 12:35:54,010 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-04-03 12:35:54,014 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-03 12:35:54,029 [screen.py:show_popup_message()] - error: Must home axis first: 149.000 120.000 51.000 [0.000]
2024-04-03 12:36:00,911 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-03 12:36:00,941 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-04-03 12:36:00,946 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-03 12:36:02,570 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-03 12:36:35,800 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-03 12:36:35,884 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-03 12:36:40,556 [move.py:change_distance()] - ### Distance 25
2024-04-03 12:36:45,002 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-04-03 12:36:45,008 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-03 12:37:00,810 [move.py:change_distance()] - ### Distance 5
2024-04-03 12:37:02,522 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+5 F600'}
2024-04-03 12:37:02,575 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-03 12:37:04,955 [move.py:change_distance()] - ### Distance 10
2024-04-03 12:37:05,386 [move.py:change_distance()] - ### Distance 10
2024-04-03 12:37:06,055 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+10 F600'}
2024-04-03 12:37:06,059 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-03 12:37:09,222 [move.py:change_distance()] - ### Distance 1
2024-04-03 12:37:09,654 [move.py:change_distance()] - ### Distance 1
2024-04-03 12:37:10,419 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-04-03 12:37:10,425 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-03 12:37:17,846 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-04-03 12:37:17,851 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-03 12:37:22,959 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-04-03 12:37:22,963 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-03 12:37:29,079 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-04-03 12:37:29,085 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-03 12:40:38,909 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffff9c0cb0c0 (GtkDialog at 0x137336c0)>
2024-04-03 12:40:38,933 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=480, height=320)
2024-04-03 12:40:40,478 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-03 12:40:40,479 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2024-04-03 12:45:57,950 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-03 12:45:57,993 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-03 12:46:08,252 [heatergraph.py:event_cb()] - Graph area: 110.54441833496094 122.82327270507812
2024-04-03 12:46:19,386 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-03 12:46:19,387 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-03 12:46:19,442 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-03 12:46:19,508 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-03 12:46:19,518 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-03 12:46:19,540 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-03 12:46:23,204 [screen.py:_load_panel()] - Loading panel: settings
2024-04-03 12:46:23,533 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-04-03 12:46:50,562 [screen_panel.py:on_dropdown_change()] - [main] theme changed to material-dark
2024-04-03 12:46:50,565 [config.py:save_user_config_options()] - Creating a new config file in /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-03 12:46:56,918 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-03 12:46:56,918 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-74-g9e42576
2024-04-03 12:46:56,918 [functions.py:log_start()] - Python version: 3.9
2024-04-03 12:46:57,085 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-03 12:46:57,086 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-03 12:46:57,104 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-03 12:46:57,108 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
invert_y = True

=======================
2024-04-03 12:46:57,109 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-03 12:46:57,235 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-03 12:46:57,236 [config.py:install_language()] - Using lang en
2024-04-03 12:46:57,259 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-03 12:46:57,262 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-03 12:46:57,267 [screen.py:__init__()] - Screen resolution: 480x320
2024-04-03 12:46:57,271 [KlippyGtk.py:__init__()] - Font size: 11.0 (medium)
2024-04-03 12:46:57,684 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-03 12:46:57,695 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-03 12:46:57,705 [screen.py:initial_connection()] - Default printer: None
2024-04-03 12:46:57,782 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-03 12:46:57,782 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-03 12:46:57,852 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-03 12:46:57,866 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-03 12:46:57,867 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 12:46:57,894 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-03 12:46:57,914 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-03 12:46:57,929 [_logging.py:info()] - Websocket connected
2024-04-03 12:46:57,930 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-03 12:46:57,933 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 12:46:57,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-03 12:46:57,969 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-03 12:46:57,970 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'on'}}
2024-04-03 12:46:57,970 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-03 12:46:57,988 [printer.py:configure_cameras()] - Cameras: []
2024-04-03 12:46:57,989 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'power'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-03 12:46:57,989 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-03 12:46:58,011 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-03 12:46:58,295 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.0', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro M300': {'description': 'Beeper macro', 'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0'}, 'gcode_macro BEEP': {'gcode': '\nM300 P100'}, 'gcode_macro BEEP_TWICE': {'gcode': '\nM300 P100\nM300 P100'}, 'gcode_macro BEEP_LONG': {'gcode': '\nM300 P500'}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.0}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro m300': {'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0', 'description': 'Beeper macro'}, 'gcode_macro beep': {'gcode': '\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_twice': {'gcode': '\nM300 P100\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_long': {'gcode': '\nM300 P500', 'description': 'G-Code macro'}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-03 12:46:58,300 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-03 12:46:58,302 [printer.py:reinit()] - Klipper version: v0.12.0-138-g5e280680-dirty
2024-04-03 12:46:58,302 [printer.py:reinit()] - # Extruders: 1
2024-04-03 12:46:58,302 [printer.py:reinit()] - # Temperature devices: 1
2024-04-03 12:46:58,302 [printer.py:reinit()] - # Fans: 3
2024-04-03 12:46:58,303 [printer.py:reinit()] - # Output pins: 1
2024-04-03 12:46:58,303 [printer.py:reinit()] - # Leds: 22
2024-04-03 12:46:58,303 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-03 12:46:58,331 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-03 12:46:58,334 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-03 12:46:58,665 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-03 12:46:58,665 [screen.py:init_klipper()] - Printer initialized
2024-04-03 12:46:58,666 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-03 12:46:58,666 [printer.py:change_state()] - Adding callback for state: ready
2024-04-03 12:46:58,705 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-03 12:46:58,710 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-03 12:46:58,853 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-03 12:46:58,893 [main_menu.py:add_device()] - Adding device: extruder
2024-04-03 12:46:58,904 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-03 12:46:58,958 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-03 12:46:58,961 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-03 12:46:59,000 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-03 12:46:59,002 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-03 12:46:59,025 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-03 12:47:03,941 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-03 12:47:03,941 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-03 12:47:03,956 [screen.py:_load_panel()] - Loading panel: menu
2024-04-03 12:47:04,362 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-03 12:47:04,422 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-03 12:47:04,431 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-03 12:47:04,447 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-03 12:47:07,110 [screen.py:_load_panel()] - Loading panel: power
2024-04-03 12:47:07,155 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > power
2024-04-03 12:47:20,731 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-03 12:47:20,802 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-03 12:47:20,907 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-03 12:47:20,920 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-03 12:47:20,936 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-03 12:47:36,157 [screen.py:_load_panel()] - Loading panel: system
2024-04-03 12:47:36,165 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/system_info
2024-04-03 12:47:36,229 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > system
2024-04-03 12:47:36,265 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': None, 'github_requests_remaining': None, 'github_limit_reset_time': None, 'version_info': {'system': {'package_count': 0, 'package_list': []}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-324', 'remote_version': 'v0.8.0-324', 'rollback_version': 'v0.8.0-324', 'current_hash': 'a3e4dac5fb20f8dfc0857a252eef5219d5e0ec4c', 'remote_hash': 'a3e4dac5fb20f8dfc0857a252eef5219d5e0ec4c', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.8.0-324-ga3e4dac5', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['moonraker/components/timelapse.py']"]}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-138', 'remote_version': 'v0.12.0-138', 'rollback_version': 'v0.12.0-132', 'current_hash': '5e280680c54efb594f312aacea585851d4956d66', 'remote_hash': '5e280680c54efb594f312aacea585851d4956d66', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.12.0-138-g5e280680', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['klippy/extras/led_effect.py']"]}, 'mainsail-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'mainsail-config', 'remote_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'recovery_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'version': 'v1.2.1-0', 'remote_version': 'v1.2.1-0', 'rollback_version': 'v1.2.1-0', 'current_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'remote_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-0-ge57810d5', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail': {'channel': 'stable', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'web', 'info_tags': [], 'name': 'mainsail', 'repo_name': 'mainsail', 'owner': 'mainsail-crew', 'version': 'v2.10.0', 'remote_version': 'v2.10.0', 'rollback_version': 'v2.10.0', 'last_error': '', 'warnings': [], 'anomalies': []}, 'crowsnest': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'crowsnest', 'remote_url': 'https://github.com/mainsail-crew/crowsnest.git', 'recovery_url': 'https://github.com/mainsail-crew/crowsnest.git', 'version': 'v4.1.8-1', 'remote_version': 'v4.1.8-1', 'rollback_version': 'v4.1.6-1', 'current_hash': '6ac4711e17f6f7c51998d1f928166fdaee383bf7', 'remote_hash': '6ac4711e17f6f7c51998d1f928166fdaee383bf7', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v4.1.8-1-g6ac4711e', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'sonar': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'sonar', 'remote_url': 'https://github.com/mainsail-crew/sonar.git', 'recovery_url': 'https://github.com/mainsail-crew/sonar.git', 'version': 'v0.1.3-1', 'remote_version': 'v0.1.3-1', 'rollback_version': 'v0.1.3-1', 'current_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'remote_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.1.3-1-geacc498a', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'timelapse': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'moonraker-timelapse', 'remote_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'recovery_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'version': 'v0.0.1-143', 'remote_version': 'v0.0.1-143', 'rollback_version': 'v0.0.1-143', 'current_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'remote_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.0.1-143-gc7fff11e', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'print_area_bed_mesh': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Turge08', 'repo_name': 'print_area_bed_mesh', 'remote_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'recovery_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'version': 'v1.2.1-21', 'remote_version': 'v1.2.1-21', 'rollback_version': 'v1.2.1-21', 'current_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'remote_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-21-g53451c9d', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'jordanruthe', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/jordanruthe/KlipperScreen.git', 'recovery_url': 'https://github.com/jordanruthe/KlipperScreen.git', 'version': 'v0.3.9-74', 'remote_version': 'v0.3.9-74', 'rollback_version': 'v0.3.9-72', 'current_hash': '9e42576bb2d5246fea4e23a88c5cec205a9fb223', 'remote_hash': '9e42576bb2d5246fea4e23a88c5cec205a9fb223', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.3.9-74-g9e42576b', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'Klipper-Adaptive-Meshing-Purging': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'kyleisah', 'repo_name': 'Klipper-Adaptive-Meshing-Purging', 'remote_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'recovery_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'version': 'v1.1.2-12', 'remote_version': 'v1.1.2-12', 'rollback_version': 'v1.1.2-12', 'current_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'remote_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.1.2-12-gd657271f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'led_effect': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'julianschill', 'repo_name': 'klipper-led_effect', 'remote_url': 'https://github.com/julianschill/klipper-led_effect.git', 'recovery_url': 'https://github.com/julianschill/klipper-led_effect.git', 'version': 'v0.0.10-1', 'remote_version': 'v0.0.10-1', 'rollback_version': 'v0.0.10-1', 'current_hash': 'c735fe52e1070632919f125513a0552e03739a5f', 'remote_hash': 'c735fe52e1070632919f125513a0552e03739a5f', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.0.10-1-gc735fe52', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'moonraker-telegram-bot': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'nlef', 'repo_name': 'moonraker-telegram-bot', 'remote_url': 'https://github.com/nlef/moonraker-telegram-bot.git', 'recovery_url': 'https://github.com/nlef/moonraker-telegram-bot.git', 'version': 'v1.5-0', 'remote_version': 'v1.5-0', 'rollback_version': 'v1.5-0', 'current_hash': 'b9b47003e13b8a23af696594aac8ba53c777f5a7', 'remote_hash': 'b9b47003e13b8a23af696594aac8ba53c777f5a7', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.5-0-gb9b47003', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 58}
2024-04-03 12:47:42,079 [system.py:refresh_updates()] - Sending machine.update.refresh
2024-04-03 12:48:14,127 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': 60, 'github_requests_remaining': 59, 'github_limit_reset_time': 1712173684.0, 'version_info': {'system': {'package_count': 0, 'package_list': []}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-324', 'remote_version': 'v0.8.0-325', 'rollback_version': 'v0.8.0-324', 'current_hash': 'a3e4dac5fb20f8dfc0857a252eef5219d5e0ec4c', 'remote_hash': '99b97afc7de1ed16ddc7db29ab6354bd6ea3dfb7', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': '99b97afc7de1ed16ddc7db29ab6354bd6ea3dfb7', 'author': 'Eric Callahan', 'date': '1712155654', 'subject': 'simplyprint: fix layer detect divide by zero', 'message': 'Signed-off-by:  Eric Callahan <arksine.code@gmail.com>', 'tag': None}], 'commits_behind_count': 1, 'git_messages': [], 'full_version_string': 'v0.8.0-324-ga3e4dac5', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['moonraker/components/timelapse.py']"]}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-138', 'remote_version': 'v0.12.0-139', 'rollback_version': 'v0.12.0-132', 'current_hash': '5e280680c54efb594f312aacea585851d4956d66', 'remote_hash': '75a40e817db4d5bc9d7d893fad499907d2b910a2', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': '75a40e817db4d5bc9d7d893fad499907d2b910a2', 'author': 'Robert Cambridge', 'date': '1712160060', 'subject': 'stm32: fix support for USARTs on STM32G0B0', 'message': 'Signed-off-by: Robert Cambridge <robert@cambridge.me>', 'tag': None}], 'commits_behind_count': 1, 'git_messages': [], 'full_version_string': 'v0.12.0-138-g5e280680', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['klippy/extras/led_effect.py']"]}, 'mainsail-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'mainsail-config', 'remote_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'recovery_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'version': 'v1.2.1-0', 'remote_version': 'v1.2.1-0', 'rollback_version': 'v1.2.1-0', 'current_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'remote_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-0-ge57810d5', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail': {'channel': 'stable', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'web', 'info_tags': [], 'name': 'mainsail', 'repo_name': 'mainsail', 'owner': 'mainsail-crew', 'version': 'v2.10.0', 'remote_version': 'v2.10.0', 'rollback_version': 'v2.10.0', 'last_error': '', 'warnings': [], 'anomalies': []}, 'crowsnest': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'crowsnest', 'remote_url': 'https://github.com/mainsail-crew/crowsnest.git', 'recovery_url': 'https://github.com/mainsail-crew/crowsnest.git', 'version': 'v4.1.8-1', 'remote_version': 'v4.1.8-1', 'rollback_version': 'v4.1.6-1', 'current_hash': '6ac4711e17f6f7c51998d1f928166fdaee383bf7', 'remote_hash': '6ac4711e17f6f7c51998d1f928166fdaee383bf7', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v4.1.8-1-g6ac4711e', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'sonar': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'sonar', 'remote_url': 'https://github.com/mainsail-crew/sonar.git', 'recovery_url': 'https://github.com/mainsail-crew/sonar.git', 'version': 'v0.1.3-1', 'remote_version': 'v0.1.3-1', 'rollback_version': 'v0.1.3-1', 'current_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'remote_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.1.3-1-geacc498a', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'timelapse': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'moonraker-timelapse', 'remote_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'recovery_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'version': 'v0.0.1-143', 'remote_version': 'v0.0.1-143', 'rollback_version': 'v0.0.1-143', 'current_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'remote_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.0.1-143-gc7fff11e', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'print_area_bed_mesh': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Turge08', 'repo_name': 'print_area_bed_mesh', 'remote_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'recovery_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'version': 'v1.2.1-21', 'remote_version': 'v1.2.1-21', 'rollback_version': 'v1.2.1-21', 'current_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'remote_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-21-g53451c9d', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'jordanruthe', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/jordanruthe/KlipperScreen.git', 'recovery_url': 'https://github.com/jordanruthe/KlipperScreen.git', 'version': 'v0.3.9-74', 'remote_version': 'v0.3.9-81', 'rollback_version': 'v0.3.9-72', 'current_hash': '9e42576bb2d5246fea4e23a88c5cec205a9fb223', 'remote_hash': 'e34205a9cfb06a32effaa287360907151e6e0579', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': 'e34205a9cfb06a32effaa287360907151e6e0579', 'author': 'alfrix', 'date': '1712165833', 'subject': 'translations: update base files', 'message': '', 'tag': None}, {'sha': '10bb6409975df9fa75ada2c75ba172baaedcc0a1', 'author': 'alfrix', 'date': '1712165712', 'subject': 'docs: minor updates', 'message': '', 'tag': None}, {'sha': '6cd1a8e12f90fb5c78025d6686f7d334e865f691', 'author': 'Alfredo Monclus', 'date': '1712165552', 'subject': 'Add an alternative to X close #1289 (#1306)', 'message': "* Changes to allow using cage-kiosk\r\n\r\nWayland support close #1289\r\n\r\n* installer: many improvements\r\n\r\n* installer: add notes about wayland status\r\n\r\n* deps: don't pull xserver with updates", 'tag': None}, {'sha': 'ec39332d34be0a5244404de0b150f973c5f44010', 'author': 'alfrix', 'date': '1712165481', 'subject': 'docs: explain more the procedure to grab system logs', 'message': '', 'tag': None}, {'sha': 'e5280b8d7a42e53496dc6b88f6848c0ba896a92a', 'author': 'alfrix', 'date': '1712163362', 'subject': "deps: don't pull in networkmanager with the updates close #1319", 'message': '', 'tag': None}, {'sha': '0441b5bd8e641a06dd53ab9d41b3fee92080284c', 'author': 'alfrix', 'date': '1712163000', 'subject': 'limits: fix panel not loading if minimum_cruise_ratio wasnt defined', 'message': '', 'tag': None}, {'sha': 'a4a09e0c482ac14600b6b5001dd69ffc3bc5cea2', 'author': 'alfrix', 'date': '1712099179', 'subject': 'workflow: add doc link to the bot', 'message': '', 'tag': None}], 'commits_behind_count': 7, 'git_messages': [], 'full_version_string': 'v0.3.9-74-g9e42576b', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'Klipper-Adaptive-Meshing-Purging': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'kyleisah', 'repo_name': 'Klipper-Adaptive-Meshing-Purging', 'remote_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'recovery_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'version': 'v1.1.2-12', 'remote_version': 'v1.1.2-12', 'rollback_version': 'v1.1.2-12', 'current_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'remote_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.1.2-12-gd657271f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'led_effect': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'julianschill', 'repo_name': 'klipper-led_effect', 'remote_url': 'https://github.com/julianschill/klipper-led_effect.git', 'recovery_url': 'https://github.com/julianschill/klipper-led_effect.git', 'version': 'v0.0.10-1', 'remote_version': 'v0.0.10-1', 'rollback_version': 'v0.0.10-1', 'current_hash': 'c735fe52e1070632919f125513a0552e03739a5f', 'remote_hash': 'c735fe52e1070632919f125513a0552e03739a5f', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.0.10-1-gc735fe52', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'moonraker-telegram-bot': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'nlef', 'repo_name': 'moonraker-telegram-bot', 'remote_url': 'https://github.com/nlef/moonraker-telegram-bot.git', 'recovery_url': 'https://github.com/nlef/moonraker-telegram-bot.git', 'version': 'v1.5-0', 'remote_version': 'v1.5-0', 'rollback_version': 'v1.5-0', 'current_hash': 'b9b47003e13b8a23af696594aac8ba53c777f5a7', 'remote_hash': 'b9b47003e13b8a23af696594aac8ba53c777f5a7', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.5-0-gb9b47003', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 59}
2024-04-03 12:48:14,140 [system.py:_needs_update()] - KlipperScreen v0.3.9-74 -> v0.3.9-81
2024-04-03 12:48:14,158 [system.py:_needs_update()] - klipper v0.12.0-138 -> v0.12.0-139
2024-04-03 12:48:14,174 [system.py:_needs_update()] - moonraker v0.8.0-324 -> v0.8.0-325
2024-04-03 12:48:33,031 [KlippyGtk.py:Dialog()] - Showing dialog Update (width=480, height=320)
2024-04-03 12:48:34,493 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-03 12:48:34,493 [system.py:update_confirm()] - Updating KlipperScreen
2024-04-03 12:48:34,494 [system.py:update_program()] - program: {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'jordanruthe', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/jordanruthe/KlipperScreen.git', 'recovery_url': 'https://github.com/jordanruthe/KlipperScreen.git', 'version': 'v0.3.9-74', 'remote_version': 'v0.3.9-81', 'rollback_version': 'v0.3.9-72', 'current_hash': '9e42576bb2d5246fea4e23a88c5cec205a9fb223', 'remote_hash': 'e34205a9cfb06a32effaa287360907151e6e0579', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': 'e34205a9cfb06a32effaa287360907151e6e0579', 'author': 'alfrix', 'date': '1712165833', 'subject': 'translations: update base files', 'message': '', 'tag': None}, {'sha': '10bb6409975df9fa75ada2c75ba172baaedcc0a1', 'author': 'alfrix', 'date': '1712165712', 'subject': 'docs: minor updates', 'message': '', 'tag': None}, {'sha': '6cd1a8e12f90fb5c78025d6686f7d334e865f691', 'author': 'Alfredo Monclus', 'date': '1712165552', 'subject': 'Add an alternative to X close #1289 (#1306)', 'message': "* Changes to allow using cage-kiosk\r\n\r\nWayland support close #1289\r\n\r\n* installer: many improvements\r\n\r\n* installer: add notes about wayland status\r\n\r\n* deps: don't pull xserver with updates", 'tag': None}, {'sha': 'ec39332d34be0a5244404de0b150f973c5f44010', 'author': 'alfrix', 'date': '1712165481', 'subject': 'docs: explain more the procedure to grab system logs', 'message': '', 'tag': None}, {'sha': 'e5280b8d7a42e53496dc6b88f6848c0ba896a92a', 'author': 'alfrix', 'date': '1712163362', 'subject': "deps: don't pull in networkmanager with the updates close #1319", 'message': '', 'tag': None}, {'sha': '0441b5bd8e641a06dd53ab9d41b3fee92080284c', 'author': 'alfrix', 'date': '1712163000', 'subject': 'limits: fix panel not loading if minimum_cruise_ratio wasnt defined', 'message': '', 'tag': None}, {'sha': 'a4a09e0c482ac14600b6b5001dd69ffc3bc5cea2', 'author': 'alfrix', 'date': '1712099179', 'subject': 'workflow: add doc link to the bot', 'message': '', 'tag': None}], 'commits_behind_count': 7, 'git_messages': [], 'full_version_string': 'v0.3.9-74-g9e42576b', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}
2024-04-03 12:48:34,526 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=480, height=320)
2024-04-03 12:48:34,528 [system.py:update_program()] - Sending machine.update.client name: KlipperScreen
2024-04-03 12:48:40,448 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-03 12:48:40,449 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-81-ge34205a
2024-04-03 12:48:40,449 [functions.py:log_start()] - Python version: 3.9
2024-04-03 12:48:40,596 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-03 12:48:40,598 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-03 12:48:40,616 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-03 12:48:40,619 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
invert_y = True

=======================
2024-04-03 12:48:40,621 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-03 12:48:40,747 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-03 12:48:40,747 [config.py:install_language()] - Using lang en
2024-04-03 12:48:40,772 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-03 12:48:40,775 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-03 12:48:40,781 [screen.py:__init__()] - Screen resolution: 480x320
2024-04-03 12:48:40,784 [KlippyGtk.py:__init__()] - Font size: 11.0 (medium)
2024-04-03 12:48:41,184 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-03 12:48:41,196 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-03 12:48:41,205 [screen.py:initial_connection()] - Default printer: None
2024-04-03 12:48:41,288 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-03 12:48:41,289 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-03 12:48:41,347 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-03 12:48:41,362 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-03 12:48:41,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 12:48:41,389 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-03 12:48:41,407 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-03 12:48:41,423 [_logging.py:info()] - Websocket connected
2024-04-03 12:48:41,423 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-03 12:48:41,460 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 12:48:41,482 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-03 12:48:41,500 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-03 12:48:41,501 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'on'}}
2024-04-03 12:48:41,501 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-03 12:48:41,519 [printer.py:configure_cameras()] - Cameras: []
2024-04-03 12:48:41,520 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'power'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-03 12:48:41,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-03 12:48:41,544 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-03 12:48:41,815 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.0', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro M300': {'description': 'Beeper macro', 'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0'}, 'gcode_macro BEEP': {'gcode': '\nM300 P100'}, 'gcode_macro BEEP_TWICE': {'gcode': '\nM300 P100\nM300 P100'}, 'gcode_macro BEEP_LONG': {'gcode': '\nM300 P500'}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.0}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro m300': {'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0', 'description': 'Beeper macro'}, 'gcode_macro beep': {'gcode': '\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_twice': {'gcode': '\nM300 P100\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_long': {'gcode': '\nM300 P500', 'description': 'G-Code macro'}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-03 12:48:41,819 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-03 12:48:41,821 [printer.py:reinit()] - Klipper version: v0.12.0-138-g5e280680-dirty
2024-04-03 12:48:41,822 [printer.py:reinit()] - # Extruders: 1
2024-04-03 12:48:41,822 [printer.py:reinit()] - # Temperature devices: 1
2024-04-03 12:48:41,822 [printer.py:reinit()] - # Fans: 3
2024-04-03 12:48:41,822 [printer.py:reinit()] - # Output pins: 1
2024-04-03 12:48:41,822 [printer.py:reinit()] - # Leds: 22
2024-04-03 12:48:41,823 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-03 12:48:41,851 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-03 12:48:41,854 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-03 12:48:42,184 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-03 12:48:42,185 [screen.py:init_klipper()] - Printer initialized
2024-04-03 12:48:42,185 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-03 12:48:42,186 [printer.py:change_state()] - Adding callback for state: ready
2024-04-03 12:48:42,196 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-03 12:48:42,202 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-03 12:48:42,333 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-03 12:48:42,365 [main_menu.py:add_device()] - Adding device: extruder
2024-04-03 12:48:42,377 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-03 12:48:42,429 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-03 12:48:42,431 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-03 12:48:42,470 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-03 12:48:42,477 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-03 12:48:42,498 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-03 12:48:45,642 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-03 12:48:45,643 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-03 12:48:45,650 [screen.py:_load_panel()] - Loading panel: menu
2024-04-03 12:48:46,016 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-03 12:48:46,080 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-03 12:48:46,089 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-03 12:48:46,105 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-03 12:48:49,354 [screen.py:_load_panel()] - Loading panel: system
2024-04-03 12:48:49,359 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/system_info
2024-04-03 12:48:49,420 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > system
2024-04-03 12:48:49,458 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': 60, 'github_requests_remaining': 59, 'github_limit_reset_time': 1712173684.0, 'version_info': {'system': {'package_count': 0, 'package_list': []}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-324', 'remote_version': 'v0.8.0-325', 'rollback_version': 'v0.8.0-324', 'current_hash': 'a3e4dac5fb20f8dfc0857a252eef5219d5e0ec4c', 'remote_hash': '99b97afc7de1ed16ddc7db29ab6354bd6ea3dfb7', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': '99b97afc7de1ed16ddc7db29ab6354bd6ea3dfb7', 'author': 'Eric Callahan', 'date': '1712155654', 'subject': 'simplyprint: fix layer detect divide by zero', 'message': 'Signed-off-by:  Eric Callahan <arksine.code@gmail.com>', 'tag': None}], 'commits_behind_count': 1, 'git_messages': [], 'full_version_string': 'v0.8.0-324-ga3e4dac5', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['moonraker/components/timelapse.py']"]}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-138', 'remote_version': 'v0.12.0-139', 'rollback_version': 'v0.12.0-132', 'current_hash': '5e280680c54efb594f312aacea585851d4956d66', 'remote_hash': '75a40e817db4d5bc9d7d893fad499907d2b910a2', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': '75a40e817db4d5bc9d7d893fad499907d2b910a2', 'author': 'Robert Cambridge', 'date': '1712160060', 'subject': 'stm32: fix support for USARTs on STM32G0B0', 'message': 'Signed-off-by: Robert Cambridge <robert@cambridge.me>', 'tag': None}], 'commits_behind_count': 1, 'git_messages': [], 'full_version_string': 'v0.12.0-138-g5e280680', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['klippy/extras/led_effect.py']"]}, 'mainsail-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'mainsail-config', 'remote_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'recovery_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'version': 'v1.2.1-0', 'remote_version': 'v1.2.1-0', 'rollback_version': 'v1.2.1-0', 'current_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'remote_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-0-ge57810d5', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail': {'channel': 'stable', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'web', 'info_tags': [], 'name': 'mainsail', 'repo_name': 'mainsail', 'owner': 'mainsail-crew', 'version': 'v2.10.0', 'remote_version': 'v2.10.0', 'rollback_version': 'v2.10.0', 'last_error': '', 'warnings': [], 'anomalies': []}, 'crowsnest': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'crowsnest', 'remote_url': 'https://github.com/mainsail-crew/crowsnest.git', 'recovery_url': 'https://github.com/mainsail-crew/crowsnest.git', 'version': 'v4.1.8-1', 'remote_version': 'v4.1.8-1', 'rollback_version': 'v4.1.6-1', 'current_hash': '6ac4711e17f6f7c51998d1f928166fdaee383bf7', 'remote_hash': '6ac4711e17f6f7c51998d1f928166fdaee383bf7', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v4.1.8-1-g6ac4711e', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'sonar': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'sonar', 'remote_url': 'https://github.com/mainsail-crew/sonar.git', 'recovery_url': 'https://github.com/mainsail-crew/sonar.git', 'version': 'v0.1.3-1', 'remote_version': 'v0.1.3-1', 'rollback_version': 'v0.1.3-1', 'current_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'remote_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.1.3-1-geacc498a', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'timelapse': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'moonraker-timelapse', 'remote_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'recovery_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'version': 'v0.0.1-143', 'remote_version': 'v0.0.1-143', 'rollback_version': 'v0.0.1-143', 'current_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'remote_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.0.1-143-gc7fff11e', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'print_area_bed_mesh': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Turge08', 'repo_name': 'print_area_bed_mesh', 'remote_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'recovery_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'version': 'v1.2.1-21', 'remote_version': 'v1.2.1-21', 'rollback_version': 'v1.2.1-21', 'current_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'remote_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-21-g53451c9d', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'jordanruthe', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/jordanruthe/KlipperScreen.git', 'recovery_url': 'https://github.com/jordanruthe/KlipperScreen.git', 'version': 'v0.3.9-81', 'remote_version': 'v0.3.9-81', 'rollback_version': 'v0.3.9-74', 'current_hash': 'e34205a9cfb06a32effaa287360907151e6e0579', 'remote_hash': 'e34205a9cfb06a32effaa287360907151e6e0579', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.3.9-81-ge34205a9', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'Klipper-Adaptive-Meshing-Purging': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'kyleisah', 'repo_name': 'Klipper-Adaptive-Meshing-Purging', 'remote_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'recovery_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'version': 'v1.1.2-12', 'remote_version': 'v1.1.2-12', 'rollback_version': 'v1.1.2-12', 'current_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'remote_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.1.2-12-gd657271f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'led_effect': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'julianschill', 'repo_name': 'klipper-led_effect', 'remote_url': 'https://github.com/julianschill/klipper-led_effect.git', 'recovery_url': 'https://github.com/julianschill/klipper-led_effect.git', 'version': 'v0.0.10-1', 'remote_version': 'v0.0.10-1', 'rollback_version': 'v0.0.10-1', 'current_hash': 'c735fe52e1070632919f125513a0552e03739a5f', 'remote_hash': 'c735fe52e1070632919f125513a0552e03739a5f', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.0.10-1-gc735fe52', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'moonraker-telegram-bot': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'nlef', 'repo_name': 'moonraker-telegram-bot', 'remote_url': 'https://github.com/nlef/moonraker-telegram-bot.git', 'recovery_url': 'https://github.com/nlef/moonraker-telegram-bot.git', 'version': 'v1.5-0', 'remote_version': 'v1.5-0', 'rollback_version': 'v1.5-0', 'current_hash': 'b9b47003e13b8a23af696594aac8ba53c777f5a7', 'remote_hash': 'b9b47003e13b8a23af696594aac8ba53c777f5a7', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.5-0-gb9b47003', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 58}
2024-04-03 12:48:49,492 [system.py:_needs_update()] - klipper v0.12.0-138 -> v0.12.0-139
2024-04-03 12:48:49,506 [system.py:_needs_update()] - moonraker v0.8.0-324 -> v0.8.0-325
2024-04-03 12:48:51,457 [KlippyGtk.py:Dialog()] - Showing dialog Update (width=480, height=320)
2024-04-03 12:48:52,843 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-03 12:48:52,844 [system.py:update_confirm()] - Updating klipper
2024-04-03 12:48:52,844 [system.py:update_program()] - program: {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-138', 'remote_version': 'v0.12.0-139', 'rollback_version': 'v0.12.0-132', 'current_hash': '5e280680c54efb594f312aacea585851d4956d66', 'remote_hash': '75a40e817db4d5bc9d7d893fad499907d2b910a2', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': '75a40e817db4d5bc9d7d893fad499907d2b910a2', 'author': 'Robert Cambridge', 'date': '1712160060', 'subject': 'stm32: fix support for USARTs on STM32G0B0', 'message': 'Signed-off-by: Robert Cambridge <robert@cambridge.me>', 'tag': None}], 'commits_behind_count': 1, 'git_messages': [], 'full_version_string': 'v0.12.0-138-g5e280680', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['klippy/extras/led_effect.py']"]}
2024-04-03 12:48:52,876 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=480, height=320)
2024-04-03 12:48:52,878 [system.py:update_program()] - Sending machine.update.klipper
2024-04-03 12:48:55,244 [base_panel.py:process_update()] - Update complete
2024-04-03 12:48:55,246 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-03 12:48:55,246 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-03 12:48:55,248 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-03 12:48:55,442 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-03 12:48:55,443 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-03 12:48:55,447 [screen.py:show_panel()] - Reinitializing panel
2024-04-03 12:48:55,525 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-03 12:48:57,491 [base_panel.py:finish_updating()] - Finishing update
2024-04-03 12:48:57,505 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-03 12:48:57,506 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-03 12:48:57,509 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-03 12:48:59,157 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 12:48:59,178 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-03 12:48:59,201 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-03 12:48:59,201 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-03 12:48:59,202 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-03 12:48:59,225 [printer.py:configure_cameras()] - Cameras: []
2024-04-03 12:48:59,226 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'power'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-03 12:48:59,226 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-03 12:48:59,811 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-03 12:48:59,902 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.0', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro M300': {'description': 'Beeper macro', 'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0'}, 'gcode_macro BEEP': {'gcode': '\nM300 P100'}, 'gcode_macro BEEP_TWICE': {'gcode': '\nM300 P100\nM300 P100'}, 'gcode_macro BEEP_LONG': {'gcode': '\nM300 P500'}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.0}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro m300': {'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0', 'description': 'Beeper macro'}, 'gcode_macro beep': {'gcode': '\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_twice': {'gcode': '\nM300 P100\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_long': {'gcode': '\nM300 P500', 'description': 'G-Code macro'}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-03 12:48:59,908 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-03 12:48:59,911 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-03 12:48:59,911 [printer.py:reinit()] - # Extruders: 1
2024-04-03 12:48:59,911 [printer.py:reinit()] - # Temperature devices: 1
2024-04-03 12:48:59,912 [printer.py:reinit()] - # Fans: 3
2024-04-03 12:48:59,912 [printer.py:reinit()] - # Output pins: 1
2024-04-03 12:48:59,912 [printer.py:reinit()] - # Leds: 22
2024-04-03 12:48:59,913 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-03 12:48:59,939 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-03 12:48:59,942 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-03 12:49:00,270 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-03 12:49:00,271 [screen.py:init_klipper()] - Printer initialized
2024-04-03 12:49:00,271 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-03 12:49:00,272 [printer.py:change_state()] - Adding callback for state: startup
2024-04-03 12:49:02,672 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-03 12:49:02,672 [printer.py:change_state()] - Adding callback for state: ready
2024-04-03 12:49:02,676 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-03 12:49:02,686 [screen.py:show_panel()] - Reinitializing panel
2024-04-03 12:49:02,884 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-03 12:49:02,906 [main_menu.py:add_device()] - Adding device: extruder
2024-04-03 12:49:02,918 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-03 12:49:02,987 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-03 12:49:02,989 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-03 12:49:03,028 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-03 12:49:03,031 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-03 12:49:03,053 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-03 12:49:03,925 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-03 12:49:06,142 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-03 12:49:06,143 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-03 12:49:06,150 [screen.py:show_panel()] - Reinitializing panel
2024-04-03 12:49:06,520 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-03 12:49:06,580 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-03 12:49:06,592 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-03 12:49:06,608 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-03 12:49:13,016 [screen.py:_load_panel()] - Loading panel: bed_level
2024-04-03 12:49:13,077 [bed_level.py:_get_screws()] - screws_tilt_adjust
2024-04-03 12:49:13,077 [bed_level.py:_get_screws()] - screw1: 62, 34
2024-04-03 12:49:13,079 [bed_level.py:_get_screws()] - screw1_name: front left screw
2024-04-03 12:49:13,080 [bed_level.py:_get_screws()] - screw2: 230, 34
2024-04-03 12:49:13,080 [bed_level.py:_get_screws()] - screw2_name: front right screw
2024-04-03 12:49:13,080 [bed_level.py:_get_screws()] - screw3: 230, 205
2024-04-03 12:49:13,080 [bed_level.py:_get_screws()] - screw3_name: rear left screw
2024-04-03 12:49:13,081 [bed_level.py:_get_screws()] - screw4: 62, 205
2024-04-03 12:49:13,081 [bed_level.py:_get_screws()] - screw4_name: rear right screw
2024-04-03 12:49:13,081 [bed_level.py:_get_screws()] - horizontal_move_z: 10
2024-04-03 12:49:13,081 [bed_level.py:_get_screws()] - speed: 50
2024-04-03 12:49:13,082 [bed_level.py:_get_screws()] - screw_thread: CW-M4
2024-04-03 12:49:13,082 [bed_level.py:__init__()] - screws_tilt_adjust: [[62.0, 34.0], [230.0, 34.0], [62.0, 205.0], [230.0, 205.0]]
2024-04-03 12:49:13,083 [printer.py:get_probe()] - Probe type: bltouch
2024-04-03 12:49:13,084 [bed_level.py:__init__()] - offset X: -39.0 Y: -10.0
2024-04-03 12:49:13,084 [bed_level.py:__init__()] - screws with offset: [[23.0, 24.0], [191.0, 24.0], [23.0, 195.0], [191.0, 195.0]]
2024-04-03 12:49:13,085 [bed_level.py:__init__()] - X: {191.0, 23.0}
Y: {24.0, 195.0}
2024-04-03 12:49:13,085 [bed_level.py:__init__()] - Using max_distance: 120 to fit: 4 screws.
2024-04-03 12:49:13,085 [bed_level.py:__init__()] - Using 4/4-screw locations
2024-04-03 12:49:13,164 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > bed_level
2024-04-03 12:49:19,024 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G28
2024-04-03 12:49:19,026 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 12:50:16,089 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 12:50:16,089 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 12:50:16,090 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 12:50:16,101 [bed_level.py:process_update()] - screw2 CW 00:11
2024-04-03 12:50:16,102 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:11 Pos: fr
2024-04-03 12:50:16,112 [bed_level.py:process_update()] - screw3 CW 00:03
2024-04-03 12:50:16,113 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:03 Pos: br
2024-04-03 12:50:16,120 [bed_level.py:process_update()] - screw4 CCW 00:14
2024-04-03 12:50:16,121 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:14 Pos: bl
2024-04-03 12:51:14,826 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 12:51:42,063 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 12:51:42,063 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 12:51:42,064 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 12:51:42,073 [bed_level.py:process_update()] - screw2 CCW 00:29
2024-04-03 12:51:42,074 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:29 Pos: fr
2024-04-03 12:51:42,081 [bed_level.py:process_update()] - screw3 CCW 00:24
2024-04-03 12:51:42,081 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:24 Pos: br
2024-04-03 12:51:42,088 [bed_level.py:process_update()] - screw4 CCW 00:15
2024-04-03 12:51:42,089 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:15 Pos: bl
2024-04-03 12:52:06,462 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 12:52:34,194 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 12:52:34,194 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 12:52:34,195 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 12:52:34,202 [bed_level.py:process_update()] - screw2 CCW 00:26
2024-04-03 12:52:34,202 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:26 Pos: fr
2024-04-03 12:52:34,210 [bed_level.py:process_update()] - screw3 CCW 00:27
2024-04-03 12:52:34,210 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:27 Pos: br
2024-04-03 12:52:34,218 [bed_level.py:process_update()] - screw4 CCW 00:38
2024-04-03 12:52:34,218 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:38 Pos: bl
2024-04-03 12:53:11,441 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 12:53:39,600 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 12:53:39,600 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 12:53:39,600 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 12:53:39,608 [bed_level.py:process_update()] - screw2 CCW 00:15
2024-04-03 12:53:39,609 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:15 Pos: fr
2024-04-03 12:53:39,616 [bed_level.py:process_update()] - screw3 CCW 00:37
2024-04-03 12:53:39,617 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:37 Pos: br
2024-04-03 12:53:39,624 [bed_level.py:process_update()] - screw4 CCW 01:15
2024-04-03 12:53:39,624 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 01:15 Pos: bl
2024-04-03 12:54:19,704 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 12:54:48,586 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 12:54:48,586 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 12:54:48,587 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 12:54:48,594 [bed_level.py:process_update()] - screw2 CCW 01:17
2024-04-03 12:54:48,595 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 01:17 Pos: fr
2024-04-03 12:54:48,603 [bed_level.py:process_update()] - screw3 CCW 01:10
2024-04-03 12:54:48,604 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 01:10 Pos: br
2024-04-03 12:54:48,611 [bed_level.py:process_update()] - screw4 CCW 01:28
2024-04-03 12:54:48,612 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 01:28 Pos: bl
2024-04-03 12:55:27,436 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 12:55:57,005 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 12:55:57,005 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 12:55:57,005 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 12:55:57,013 [bed_level.py:process_update()] - screw2 CCW 00:16
2024-04-03 12:55:57,014 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:16 Pos: fr
2024-04-03 12:55:57,022 [bed_level.py:process_update()] - screw3 CCW 00:27
2024-04-03 12:55:57,022 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:27 Pos: br
2024-04-03 12:55:57,032 [bed_level.py:process_update()] - screw4 CCW 01:17
2024-04-03 12:55:57,033 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 01:17 Pos: bl
2024-04-03 12:56:22,234 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 12:56:51,885 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 12:56:51,885 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 12:56:51,886 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 12:56:51,893 [bed_level.py:process_update()] - screw2 CCW 00:02
2024-04-03 12:56:51,894 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:02 Pos: fr
2024-04-03 12:56:51,901 [bed_level.py:process_update()] - screw3 CCW 00:04
2024-04-03 12:56:51,902 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:04 Pos: br
2024-04-03 12:56:51,914 [bed_level.py:process_update()] - screw4 CCW 01:07
2024-04-03 12:56:51,915 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 01:07 Pos: bl
2024-04-03 12:57:16,382 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 12:57:46,042 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 12:57:46,042 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 12:57:46,042 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 12:57:46,050 [bed_level.py:process_update()] - screw2 CCW 00:06
2024-04-03 12:57:46,051 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:06 Pos: fr
2024-04-03 12:57:46,058 [bed_level.py:process_update()] - screw3 CCW 00:05
2024-04-03 12:57:46,058 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:05 Pos: br
2024-04-03 12:57:46,065 [bed_level.py:process_update()] - screw4 CCW 00:59
2024-04-03 12:57:46,065 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:59 Pos: bl
2024-04-03 12:58:51,296 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 12:59:21,036 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 12:59:21,036 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 12:59:21,036 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 12:59:21,044 [bed_level.py:process_update()] - screw2 CCW 00:01
2024-04-03 12:59:21,045 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:01 Pos: fr
2024-04-03 12:59:21,052 [bed_level.py:process_update()] - screw3 CCW 00:02
2024-04-03 12:59:21,053 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:02 Pos: br
2024-04-03 12:59:21,059 [bed_level.py:process_update()] - screw4 CCW 00:57
2024-04-03 12:59:21,060 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:57 Pos: bl
2024-04-03 13:01:03,998 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:01:33,631 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:01:33,631 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:01:33,632 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:01:33,642 [bed_level.py:process_update()] - screw2 CW 00:17
2024-04-03 13:01:33,643 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:17 Pos: fr
2024-04-03 13:01:33,652 [bed_level.py:process_update()] - screw3 CW 00:22
2024-04-03 13:01:33,653 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:22 Pos: br
2024-04-03 13:01:33,663 [bed_level.py:process_update()] - screw4 CCW 00:34
2024-04-03 13:01:33,664 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:34 Pos: bl
2024-04-03 13:01:52,494 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:02:21,988 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:02:21,988 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:02:21,989 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:02:21,999 [bed_level.py:process_update()] - screw2 CW 00:11
2024-04-03 13:02:21,999 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:11 Pos: fr
2024-04-03 13:02:22,006 [bed_level.py:process_update()] - screw3 CW 00:21
2024-04-03 13:02:22,007 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:21 Pos: br
2024-04-03 13:02:22,014 [bed_level.py:process_update()] - screw4 CCW 00:18
2024-04-03 13:02:22,015 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:18 Pos: bl
2024-04-03 13:02:47,477 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:03:16,869 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:03:16,870 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:03:16,870 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:03:16,879 [bed_level.py:process_update()] - screw2 CW 00:06
2024-04-03 13:03:16,879 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:06 Pos: fr
2024-04-03 13:03:16,887 [bed_level.py:process_update()] - screw3 CW 00:17
2024-04-03 13:03:16,887 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:17 Pos: br
2024-04-03 13:03:16,894 [bed_level.py:process_update()] - screw4 CCW 00:12
2024-04-03 13:03:16,895 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:12 Pos: bl
2024-04-03 13:03:44,766 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:04:14,011 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:04:14,012 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:04:14,012 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:04:14,019 [bed_level.py:process_update()] - screw2 CCW 00:15
2024-04-03 13:04:14,020 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:15 Pos: fr
2024-04-03 13:04:14,026 [bed_level.py:process_update()] - screw3 CCW 00:10
2024-04-03 13:04:14,027 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:10 Pos: br
2024-04-03 13:04:14,036 [bed_level.py:process_update()] - screw4 CCW 00:20
2024-04-03 13:04:14,037 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:20 Pos: bl
2024-04-03 13:04:41,520 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:05:10,646 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:05:10,646 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:05:10,646 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:05:10,654 [bed_level.py:process_update()] - screw2 CW 00:29
2024-04-03 13:05:10,654 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:29 Pos: fr
2024-04-03 13:05:10,662 [bed_level.py:process_update()] - screw3 CW 00:42
2024-04-03 13:05:10,663 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:42 Pos: br
2024-04-03 13:05:10,670 [bed_level.py:process_update()] - screw4 CW 00:11
2024-04-03 13:05:10,670 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:11 Pos: bl
2024-04-03 13:05:44,594 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:06:13,556 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:06:13,556 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:06:13,557 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:06:13,565 [bed_level.py:process_update()] - screw2 CW 00:12
2024-04-03 13:06:13,566 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:12 Pos: fr
2024-04-03 13:06:13,573 [bed_level.py:process_update()] - screw3 CW 00:20
2024-04-03 13:06:13,573 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:20 Pos: br
2024-04-03 13:06:13,580 [bed_level.py:process_update()] - screw4 CW 00:03
2024-04-03 13:06:13,581 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:03 Pos: bl
2024-04-03 13:06:37,594 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:07:06,220 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:07:06,220 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:07:06,220 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:07:06,229 [bed_level.py:process_update()] - screw2 CW 00:00
2024-04-03 13:07:06,229 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:00 Pos: fr
2024-04-03 13:07:06,237 [bed_level.py:process_update()] - screw3 CW 00:01
2024-04-03 13:07:06,238 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:01 Pos: br
2024-04-03 13:07:06,245 [bed_level.py:process_update()] - screw4 CCW 00:00
2024-04-03 13:07:06,246 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:00 Pos: bl
2024-04-03 13:07:26,146 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:07:54,825 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:07:54,826 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:07:54,826 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:07:54,833 [bed_level.py:process_update()] - screw2 CCW 00:01
2024-04-03 13:07:54,834 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:01 Pos: fr
2024-04-03 13:07:54,841 [bed_level.py:process_update()] - screw3 CCW 00:01
2024-04-03 13:07:54,841 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:01 Pos: br
2024-04-03 13:07:54,848 [bed_level.py:process_update()] - screw4 CCW 00:01
2024-04-03 13:07:54,849 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:01 Pos: bl
2024-04-03 13:08:15,174 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:08:43,946 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:08:43,946 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:08:43,947 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:08:43,954 [bed_level.py:process_update()] - screw2 CW 00:00
2024-04-03 13:08:43,955 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:00 Pos: fr
2024-04-03 13:08:43,961 [bed_level.py:process_update()] - screw3 CW 00:00
2024-04-03 13:08:43,962 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:00 Pos: br
2024-04-03 13:08:43,972 [bed_level.py:process_update()] - screw4 CCW 00:03
2024-04-03 13:08:43,972 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:03 Pos: bl
2024-04-03 13:08:59,002 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:09:27,801 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:09:27,801 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:09:27,802 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:09:27,809 [bed_level.py:process_update()] - screw2 CW 00:00
2024-04-03 13:09:27,810 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:00 Pos: fr
2024-04-03 13:09:27,817 [bed_level.py:process_update()] - screw3 CW 00:00
2024-04-03 13:09:27,818 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:00 Pos: br
2024-04-03 13:09:27,825 [bed_level.py:process_update()] - screw4 CCW 00:03
2024-04-03 13:09:27,826 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:03 Pos: bl
2024-04-03 13:09:40,908 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:10:09,685 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:10:09,686 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:10:09,686 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:10:09,696 [bed_level.py:process_update()] - screw2 CCW 00:00
2024-04-03 13:10:09,697 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:00 Pos: fr
2024-04-03 13:10:09,703 [bed_level.py:process_update()] - screw3 CW 00:00
2024-04-03 13:10:09,704 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:00 Pos: br
2024-04-03 13:10:09,710 [bed_level.py:process_update()] - screw4 CCW 00:03
2024-04-03 13:10:09,711 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:03 Pos: bl
2024-04-03 13:10:21,915 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:10:50,549 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:10:50,550 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:10:50,550 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:10:50,558 [bed_level.py:process_update()] - screw2 CCW 00:00
2024-04-03 13:10:50,558 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:00 Pos: fr
2024-04-03 13:10:50,566 [bed_level.py:process_update()] - screw3 CW 00:00
2024-04-03 13:10:50,567 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:00 Pos: br
2024-04-03 13:10:50,574 [bed_level.py:process_update()] - screw4 CCW 00:03
2024-04-03 13:10:50,574 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:03 Pos: bl
2024-04-03 13:11:05,756 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:11:34,406 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:11:34,406 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:11:34,407 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:11:34,415 [bed_level.py:process_update()] - screw2 CCW 00:00
2024-04-03 13:11:34,416 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:00 Pos: fr
2024-04-03 13:11:34,423 [bed_level.py:process_update()] - screw3 CW 00:00
2024-04-03 13:11:34,424 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:00 Pos: br
2024-04-03 13:11:34,431 [bed_level.py:process_update()] - screw4 CCW 00:02
2024-04-03 13:11:34,432 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:02 Pos: bl
2024-04-03 13:11:46,174 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:12:15,028 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:12:15,029 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:12:15,029 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:12:15,037 [bed_level.py:process_update()] - screw2 CCW 00:01
2024-04-03 13:12:15,038 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:01 Pos: fr
2024-04-03 13:12:15,046 [bed_level.py:process_update()] - screw3 CW 00:00
2024-04-03 13:12:15,046 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:00 Pos: br
2024-04-03 13:12:15,053 [bed_level.py:process_update()] - screw4 CCW 00:02
2024-04-03 13:12:15,054 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:02 Pos: bl
2024-04-03 13:12:27,353 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:12:56,392 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:12:56,393 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:12:56,393 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:12:56,401 [bed_level.py:process_update()] - screw2 CCW 00:00
2024-04-03 13:12:56,402 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:00 Pos: fr
2024-04-03 13:12:56,408 [bed_level.py:process_update()] - screw3 CW 00:01
2024-04-03 13:12:56,409 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:01 Pos: br
2024-04-03 13:12:56,416 [bed_level.py:process_update()] - screw4 CCW 00:01
2024-04-03 13:12:56,416 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:01 Pos: bl
2024-04-03 13:13:16,256 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:13:45,027 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:13:45,028 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:13:45,028 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:13:45,036 [bed_level.py:process_update()] - screw2 CCW 00:01
2024-04-03 13:13:45,036 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:01 Pos: fr
2024-04-03 13:13:45,043 [bed_level.py:process_update()] - screw3 CCW 00:01
2024-04-03 13:13:45,044 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:01 Pos: br
2024-04-03 13:13:45,051 [bed_level.py:process_update()] - screw4 CCW 00:01
2024-04-03 13:13:45,052 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:01 Pos: bl
2024-04-03 13:15:03,554 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:15:32,306 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:15:32,307 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:15:32,308 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:15:32,320 [bed_level.py:process_update()] - screw2 CW 00:02
2024-04-03 13:15:32,321 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:02 Pos: fr
2024-04-03 13:15:32,332 [bed_level.py:process_update()] - screw3 CW 00:02
2024-04-03 13:15:32,333 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:02 Pos: br
2024-04-03 13:15:32,344 [bed_level.py:process_update()] - screw4 CCW 00:01
2024-04-03 13:15:32,345 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:01 Pos: bl
2024-04-03 13:15:49,667 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2024-04-03 13:16:18,465 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:16:18,466 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:16:18,466 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:16:18,473 [bed_level.py:process_update()] - screw2 CW 00:00
2024-04-03 13:16:18,474 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:00 Pos: fr
2024-04-03 13:16:18,481 [bed_level.py:process_update()] - screw3 CCW 00:01
2024-04-03 13:16:18,481 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:01 Pos: br
2024-04-03 13:16:18,489 [bed_level.py:process_update()] - screw4 CW 00:02
2024-04-03 13:16:18,489 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:02 Pos: bl
2024-04-03 13:16:34,647 [screen.py:_load_panel()] - Loading panel: shutdown
2024-04-03 13:16:34,693 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > bed_level > shutdown
2024-04-03 13:16:39,994 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-03 13:16:40,027 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > bed_level
2024-04-03 13:16:40,029 [bed_level.py:process_update()] - screw1 CW 00:00
2024-04-03 13:16:40,029 [bed_level.py:process_update()] - X: 23.0 Y: 24.0 Adjust: 00:00 Pos: fl
2024-04-03 13:16:40,030 [bed_level.py:process_update()] - screw1 is the Reference
2024-04-03 13:16:40,037 [bed_level.py:process_update()] - screw2 CW 00:00
2024-04-03 13:16:40,038 [bed_level.py:process_update()] - X: 191.0 Y: 24.0 Adjust: 00:00 Pos: fr
2024-04-03 13:16:40,045 [bed_level.py:process_update()] - screw3 CCW 00:01
2024-04-03 13:16:40,046 [bed_level.py:process_update()] - X: 191.0 Y: 195.0 Adjust: 00:01 Pos: br
2024-04-03 13:16:40,053 [bed_level.py:process_update()] - screw4 CW 00:02
2024-04-03 13:16:40,053 [bed_level.py:process_update()] - X: 23.0 Y: 195.0 Adjust: 00:02 Pos: bl
2024-04-03 13:16:43,450 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-03 13:16:43,493 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-03 13:16:43,557 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-03 13:16:43,567 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-03 13:16:43,582 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-03 13:16:45,864 [screen.py:_load_panel()] - Loading panel: pins
2024-04-03 13:16:45,870 [pins.py:add_pin()] - Adding pin: output_pin relay
2024-04-03 13:16:45,912 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > pins
2024-04-03 13:16:45,915 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_PIN PIN=relay VALUE=1
2024-04-03 13:16:47,746 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_PIN PIN=relay VALUE=0
2024-04-03 13:16:47,786 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'off', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-03 05:31:35,326 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-03 05:31:35,327 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-81-ge34205a
2024-04-03 05:31:35,328 [functions.py:log_start()] - Python version: 3.9
2024-04-03 05:31:35,769 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-03 05:31:35,770 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-03 05:31:35,822 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-03 05:31:35,826 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
invert_y = True

=======================
2024-04-03 05:31:35,835 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-03 05:31:36,031 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-03 05:31:36,032 [config.py:install_language()] - Using lang en
2024-04-03 05:31:36,094 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-03 05:31:36,101 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-03 05:31:36,130 [screen.py:__init__()] - Screen resolution: 480x320
2024-04-03 05:31:36,134 [KlippyGtk.py:__init__()] - Font size: 11.0 (medium)
2024-04-03 05:31:37,631 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-03 05:31:37,649 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-03 05:31:37,664 [screen.py:initial_connection()] - Default printer: None
2024-04-03 05:31:37,746 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-03 05:31:37,747 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-03 05:31:37,835 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-03 05:31:37,860 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-03 05:31:37,861 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 05:31:37,906 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-03 05:31:37,936 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-03 05:31:37,963 [_logging.py:info()] - Websocket connected
2024-04-03 05:31:37,964 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-03 05:31:38,022 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 05:31:38,049 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-03 05:31:38,072 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-03 05:31:38,073 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-03 05:31:38,073 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-03 05:31:38,100 [printer.py:configure_cameras()] - Cameras: []
2024-04-03 05:31:38,101 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'power', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-03 05:31:38,102 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-03 05:31:38,149 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-03 05:31:40,343 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-03 05:31:41,111 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 05:31:41,135 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-03 05:31:41,158 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-03 05:31:41,159 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'on'}}
2024-04-03 05:31:41,159 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-03 05:31:41,184 [printer.py:configure_cameras()] - Cameras: []
2024-04-03 05:31:41,185 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'power', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-03 05:31:41,185 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-03 05:31:41,214 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-03 05:31:41,379 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.0', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro M300': {'description': 'Beeper macro', 'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0'}, 'gcode_macro BEEP': {'gcode': '\nM300 P100'}, 'gcode_macro BEEP_TWICE': {'gcode': '\nM300 P100\nM300 P100'}, 'gcode_macro BEEP_LONG': {'gcode': '\nM300 P500'}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.0}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro m300': {'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0', 'description': 'Beeper macro'}, 'gcode_macro beep': {'gcode': '\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_twice': {'gcode': '\nM300 P100\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_long': {'gcode': '\nM300 P500', 'description': 'G-Code macro'}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-03 05:31:41,384 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-03 05:31:41,387 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-03 05:31:41,387 [printer.py:reinit()] - # Extruders: 1
2024-04-03 05:31:41,388 [printer.py:reinit()] - # Temperature devices: 1
2024-04-03 05:31:41,388 [printer.py:reinit()] - # Fans: 3
2024-04-03 05:31:41,389 [printer.py:reinit()] - # Output pins: 1
2024-04-03 05:31:41,409 [printer.py:reinit()] - # Leds: 22
2024-04-03 05:31:41,410 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-03 05:31:41,473 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-03 05:31:41,478 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-03 05:31:41,778 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-03 05:31:41,779 [screen.py:init_klipper()] - Printer initialized
2024-04-03 05:31:41,780 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-03 05:31:41,781 [printer.py:change_state()] - Adding callback for state: ready
2024-04-03 05:31:41,790 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-03 05:31:41,804 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-03 05:31:42,038 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-03 05:31:42,068 [main_menu.py:add_device()] - Adding device: extruder
2024-04-03 05:31:42,081 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-03 05:31:42,149 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-03 05:31:42,152 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-03 05:31:42,189 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-03 05:31:42,192 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-03 05:31:42,220 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-03 05:31:43,110 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 05:31:43,136 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'power', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-03 05:31:43,137 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-03 05:31:43,167 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-03 05:31:43,374 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.0', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro M300': {'description': 'Beeper macro', 'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0'}, 'gcode_macro BEEP': {'gcode': '\nM300 P100'}, 'gcode_macro BEEP_TWICE': {'gcode': '\nM300 P100\nM300 P100'}, 'gcode_macro BEEP_LONG': {'gcode': '\nM300 P500'}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.0}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro m300': {'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0', 'description': 'Beeper macro'}, 'gcode_macro beep': {'gcode': '\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_twice': {'gcode': '\nM300 P100\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_long': {'gcode': '\nM300 P500', 'description': 'G-Code macro'}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-03 05:31:43,382 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-03 05:31:43,385 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-03 05:31:43,385 [printer.py:reinit()] - # Extruders: 1
2024-04-03 05:31:43,385 [printer.py:reinit()] - # Temperature devices: 1
2024-04-03 05:31:43,386 [printer.py:reinit()] - # Fans: 3
2024-04-03 05:31:43,386 [printer.py:reinit()] - # Output pins: 1
2024-04-03 05:31:43,387 [printer.py:reinit()] - # Leds: 22
2024-04-03 05:31:43,387 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-03 05:31:43,424 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-03 05:31:43,428 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-03 05:31:43,737 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-03 05:31:43,737 [screen.py:init_klipper()] - Printer initialized
2024-04-03 05:31:47,117 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-03 05:31:47,118 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-03 05:31:47,157 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-03 05:31:47,159 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-03 05:31:47,181 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 01:42:56,257 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'off', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-03 05:31:37,064 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-03 05:31:37,065 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-81-ge34205a
2024-04-03 05:31:37,066 [functions.py:log_start()] - Python version: 3.9
2024-04-03 05:31:37,602 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-03 05:31:37,603 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-03 05:31:37,651 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-03 05:31:37,655 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
invert_y = True

=======================
2024-04-03 05:31:37,667 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-03 05:31:37,989 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-03 05:31:37,990 [config.py:install_language()] - Using lang en
2024-04-03 05:31:38,058 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-03 05:31:38,064 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-03 05:31:38,077 [screen.py:__init__()] - Screen resolution: 480x320
2024-04-03 05:31:38,084 [KlippyGtk.py:__init__()] - Font size: 11.0 (medium)
2024-04-03 05:31:39,863 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-03 05:31:39,917 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-03 05:31:39,966 [screen.py:initial_connection()] - Default printer: None
2024-04-03 05:31:40,112 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-03 05:31:40,116 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-03 05:31:40,310 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-03 05:31:40,369 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-03 05:31:40,370 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 05:31:40,444 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-03 05:31:40,489 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-03 05:31:40,539 [_logging.py:info()] - Websocket connected
2024-04-03 05:31:40,540 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-03 05:31:40,544 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-03 05:31:40,576 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-03 05:31:40,609 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-03 05:31:40,612 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-03 05:31:40,613 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-03 05:31:40,669 [printer.py:configure_cameras()] - Cameras: []
2024-04-03 05:31:40,670 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'power', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-03 05:31:40,671 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-03 05:31:40,709 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-03 05:31:40,782 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.0', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro M300': {'description': 'Beeper macro', 'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0'}, 'gcode_macro BEEP': {'gcode': '\nM300 P100'}, 'gcode_macro BEEP_TWICE': {'gcode': '\nM300 P100\nM300 P100'}, 'gcode_macro BEEP_LONG': {'gcode': '\nM300 P500'}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.0}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro m300': {'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0', 'description': 'Beeper macro'}, 'gcode_macro beep': {'gcode': '\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_twice': {'gcode': '\nM300 P100\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_long': {'gcode': '\nM300 P500', 'description': 'G-Code macro'}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-03 05:31:40,788 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-03 05:31:40,790 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-03 05:31:40,791 [printer.py:reinit()] - # Extruders: 1
2024-04-03 05:31:40,791 [printer.py:reinit()] - # Temperature devices: 1
2024-04-03 05:31:40,792 [printer.py:reinit()] - # Fans: 3
2024-04-03 05:31:40,792 [printer.py:reinit()] - # Output pins: 1
2024-04-03 05:31:40,793 [printer.py:reinit()] - # Leds: 22
2024-04-03 05:31:40,793 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-03 05:31:40,839 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-03 05:31:40,847 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-03 05:31:41,097 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-03 05:31:41,097 [screen.py:init_klipper()] - Printer initialized
2024-04-03 05:31:41,098 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-03 05:31:41,099 [printer.py:change_state()] - Adding callback for state: startup
2024-04-03 05:31:43,499 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-03 05:31:43,500 [printer.py:change_state()] - Adding callback for state: ready
2024-04-03 05:31:43,502 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-03 05:31:43,509 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-03 05:31:43,713 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-03 05:31:43,739 [main_menu.py:add_device()] - Adding device: extruder
2024-04-03 05:31:43,750 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-03 05:31:43,841 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-03 05:31:43,845 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-03 05:31:43,869 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-03 05:31:44,016 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-03 05:31:44,017 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-03 05:31:44,060 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-03 05:31:44,520 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-03 05:31:48,624 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-03 05:31:48,660 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-03 05:31:48,663 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-03 05:31:48,688 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-03 05:31:49,623 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-03 05:31:49,657 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-03 05:31:49,659 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-03 05:31:49,681 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 01:59:29,610 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-04 01:59:29,611 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-04 01:59:29,612 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-04 01:59:29,612 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 01:59:29,617 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 01:59:29,725 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 01:59:29,756 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 01:59:33,238 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 01:59:33,261 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 01:59:33,282 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 01:59:33,283 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-04 01:59:33,283 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 01:59:33,308 [printer.py:configure_cameras()] - Cameras: []
2024-04-04 01:59:33,309 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'power', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 01:59:33,310 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 01:59:33,941 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 01:59:34,004 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro M300': {'description': 'Beeper macro', 'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0'}, 'gcode_macro BEEP': {'gcode': '\nM300 P100'}, 'gcode_macro BEEP_TWICE': {'gcode': '\nM300 P100\nM300 P100'}, 'gcode_macro BEEP_LONG': {'gcode': '\nM300 P500'}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro m300': {'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0', 'description': 'Beeper macro'}, 'gcode_macro beep': {'gcode': '\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_twice': {'gcode': '\nM300 P100\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_long': {'gcode': '\nM300 P500', 'description': 'G-Code macro'}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 01:59:34,010 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 01:59:34,012 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 01:59:34,013 [printer.py:reinit()] - # Extruders: 1
2024-04-04 01:59:34,013 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 01:59:34,014 [printer.py:reinit()] - # Fans: 3
2024-04-04 01:59:34,016 [printer.py:reinit()] - # Output pins: 1
2024-04-04 01:59:34,016 [printer.py:reinit()] - # Leds: 22
2024-04-04 01:59:34,017 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 01:59:34,051 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 01:59:34,054 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 01:59:34,286 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-04 01:59:34,286 [screen.py:init_klipper()] - Printer initialized
2024-04-04 01:59:34,287 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-04 01:59:34,288 [printer.py:change_state()] - Adding callback for state: startup
2024-04-04 01:59:36,762 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-04 01:59:36,763 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 01:59:36,764 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-04 01:59:36,772 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 01:59:36,895 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-04 01:59:36,917 [main_menu.py:add_device()] - Adding device: extruder
2024-04-04 01:59:36,942 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-04 01:59:37,011 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 01:59:37,014 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 01:59:37,055 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 01:59:37,058 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 01:59:37,092 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 01:59:37,775 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 02:09:15,847 [screen.py:show_popup_message()] - error: // Unknown command:"RESTORE"
2024-04-04 02:09:27,544 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-04 02:09:27,545 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-04 02:09:27,546 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-04 02:09:27,547 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 02:09:27,555 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 02:09:27,617 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 02:09:27,633 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 02:09:31,239 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 02:09:31,264 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 02:09:31,287 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 02:09:31,287 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-04 02:09:31,288 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 02:09:31,312 [printer.py:configure_cameras()] - Cameras: []
2024-04-04 02:09:31,313 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'power', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 02:09:31,313 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 02:09:32,093 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 02:09:32,158 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro M300': {'description': 'Beeper macro', 'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0'}, 'gcode_macro BEEP': {'gcode': '\nM300 P100'}, 'gcode_macro BEEP_TWICE': {'gcode': '\nM300 P100\nM300 P100'}, 'gcode_macro BEEP_LONG': {'gcode': '\nM300 P500'}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro m300': {'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0', 'description': 'Beeper macro'}, 'gcode_macro beep': {'gcode': '\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_twice': {'gcode': '\nM300 P100\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_long': {'gcode': '\nM300 P500', 'description': 'G-Code macro'}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 02:09:32,164 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 02:09:32,166 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 02:09:32,167 [printer.py:reinit()] - # Extruders: 1
2024-04-04 02:09:32,167 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 02:09:32,169 [printer.py:reinit()] - # Fans: 3
2024-04-04 02:09:32,170 [printer.py:reinit()] - # Output pins: 1
2024-04-04 02:09:32,170 [printer.py:reinit()] - # Leds: 22
2024-04-04 02:09:32,171 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 02:09:32,198 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 02:09:32,201 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 02:09:32,517 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-04 02:09:32,518 [screen.py:init_klipper()] - Printer initialized
2024-04-04 02:09:32,518 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-04 02:09:32,519 [printer.py:change_state()] - Adding callback for state: startup
2024-04-04 02:09:34,980 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-04 02:09:34,980 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 02:09:34,983 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-04 02:09:34,989 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 02:09:35,125 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-04 02:09:35,148 [main_menu.py:add_device()] - Adding device: extruder
2024-04-04 02:09:35,173 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-04 02:09:35,229 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 02:09:35,232 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 02:09:35,272 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 02:09:35,275 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 02:09:35,297 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 02:09:35,993 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 02:09:45,990 [screen.py:show_popup_message()] - error: // Unknown command:"RESTORE"
2024-04-04 02:24:04,695 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-04 02:24:04,697 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-81-ge34205a
2024-04-04 02:24:04,697 [functions.py:log_start()] - Python version: 3.9
2024-04-04 02:24:05,514 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-04 02:24:05,516 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-04 02:24:05,551 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-04 02:24:05,567 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
invert_y = True

=======================
2024-04-04 02:24:05,576 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-04 02:24:06,023 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-04 02:24:06,024 [config.py:install_language()] - Using lang en
2024-04-04 02:24:06,096 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-04 02:24:06,117 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-04 02:24:06,127 [screen.py:__init__()] - Screen resolution: 480x320
2024-04-04 02:24:06,138 [KlippyGtk.py:__init__()] - Font size: 11.0 (medium)
2024-04-04 02:24:08,613 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-04 02:24:08,663 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-04 02:24:08,713 [screen.py:initial_connection()] - Default printer: None
2024-04-04 02:24:08,920 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-04 02:24:08,924 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-04 02:24:09,107 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 02:24:09,167 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-04 02:24:09,174 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 02:24:09,271 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-04 02:24:09,313 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-04 02:24:09,401 [_logging.py:info()] - Websocket connected
2024-04-04 02:24:09,403 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-04 02:24:09,471 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 02:24:09,519 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 02:24:09,556 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 02:24:09,557 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-04 02:24:09,558 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 02:24:09,585 [printer.py:configure_cameras()] - Cameras: []
2024-04-04 02:24:09,586 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'power', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 02:24:09,586 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 02:24:09,624 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 02:24:09,801 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro M300': {'description': 'Beeper macro', 'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0'}, 'gcode_macro BEEP': {'gcode': '\nM300 P100'}, 'gcode_macro BEEP_TWICE': {'gcode': '\nM300 P100\nM300 P100'}, 'gcode_macro BEEP_LONG': {'gcode': '\nM300 P500'}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro m300': {'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0', 'description': 'Beeper macro'}, 'gcode_macro beep': {'gcode': '\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_twice': {'gcode': '\nM300 P100\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_long': {'gcode': '\nM300 P500', 'description': 'G-Code macro'}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 02:24:09,810 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 02:24:09,813 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 02:24:09,813 [printer.py:reinit()] - # Extruders: 1
2024-04-04 02:24:09,814 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 02:24:09,815 [printer.py:reinit()] - # Fans: 3
2024-04-04 02:24:09,815 [printer.py:reinit()] - # Output pins: 1
2024-04-04 02:24:09,815 [printer.py:reinit()] - # Leds: 22
2024-04-04 02:24:09,818 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 02:24:09,863 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 02:24:09,872 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 02:24:10,101 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-04 02:24:10,102 [screen.py:init_klipper()] - Printer initialized
2024-04-04 02:24:10,103 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-04 02:24:10,103 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 02:24:10,156 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-04 02:24:10,161 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-04 02:24:10,472 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-04 02:24:10,497 [main_menu.py:add_device()] - Adding device: extruder
2024-04-04 02:24:10,509 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-04 02:24:10,608 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 02:24:10,612 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 02:24:10,644 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-04 02:24:10,727 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 02:24:10,782 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-04 02:24:10,783 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 02:24:10,843 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 02:24:10,866 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 02:24:10,903 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 02:24:15,973 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 02:24:16,018 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 02:24:16,021 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 02:24:16,050 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 02:24:23,506 [screen.py:show_popup_message()] - error: // Unknown command:"RESTORE"
2024-04-04 02:25:15,001 [screen.py:show_popup_message()] - error: // Unknown command:"UNINSTALL_BAK_UTIL"
2024-04-04 02:48:54,245 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-04 02:48:54,246 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-81-ge34205a
2024-04-04 02:48:54,246 [functions.py:log_start()] - Python version: 3.9
2024-04-04 02:48:54,672 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-04 02:48:54,673 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-04 02:48:54,707 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-04 02:48:54,712 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
invert_y = True

=======================
2024-04-04 02:48:54,714 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-04 02:48:54,898 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-04 02:48:54,899 [config.py:install_language()] - Using lang en
2024-04-04 02:48:54,946 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-04 02:48:54,951 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-04 02:48:54,961 [screen.py:__init__()] - Screen resolution: 480x320
2024-04-04 02:48:54,965 [KlippyGtk.py:__init__()] - Font size: 11.0 (medium)
2024-04-04 02:48:56,914 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-04 02:48:56,929 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-04 02:48:56,940 [screen.py:initial_connection()] - Default printer: None
2024-04-04 02:48:57,024 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-04 02:48:57,025 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-04 02:48:57,102 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 02:48:57,122 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-04 02:48:57,123 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 02:48:57,167 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-04 02:48:57,190 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-04 02:48:57,213 [_logging.py:info()] - Websocket connected
2024-04-04 02:48:57,213 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-04 02:48:57,217 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 02:48:57,243 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 02:48:57,267 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 02:48:57,268 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-04 02:48:57,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 02:48:57,293 [printer.py:configure_cameras()] - Cameras: [{'name': 'Logitech', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ca5a12bb-b321-4097-81ea-35079d714b16'}]
2024-04-04 02:48:57,294 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat', 'power'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 02:48:57,294 [screen.py:init_klipper()] - Klipper not connected
2024-04-04 02:49:01,020 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 02:49:01,043 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat', 'power'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 02:49:01,044 [screen.py:init_klipper()] - Klipper not connected
2024-04-04 02:49:04,019 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 02:49:04,041 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat', 'power'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 02:49:04,041 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 02:49:04,079 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-04 02:49:07,019 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 02:49:07,038 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 02:49:07,055 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 02:49:07,056 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-04 02:49:07,056 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 02:49:07,075 [printer.py:configure_cameras()] - Cameras: [{'name': 'Logitech', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ca5a12bb-b321-4097-81ea-35079d714b16'}]
2024-04-04 02:49:07,075 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat', 'power'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 02:49:07,076 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 02:49:07,098 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 02:49:07,152 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro M300': {'description': 'Beeper macro', 'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0'}, 'gcode_macro BEEP': {'gcode': '\nM300 P100'}, 'gcode_macro BEEP_TWICE': {'gcode': '\nM300 P100\nM300 P100'}, 'gcode_macro BEEP_LONG': {'gcode': '\nM300 P500'}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro m300': {'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0', 'description': 'Beeper macro'}, 'gcode_macro beep': {'gcode': '\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_twice': {'gcode': '\nM300 P100\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_long': {'gcode': '\nM300 P500', 'description': 'G-Code macro'}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 02:49:07,157 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 02:49:07,159 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 02:49:07,159 [printer.py:reinit()] - # Extruders: 1
2024-04-04 02:49:07,160 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 02:49:07,160 [printer.py:reinit()] - # Fans: 3
2024-04-04 02:49:07,162 [printer.py:reinit()] - # Output pins: 1
2024-04-04 02:49:07,163 [printer.py:reinit()] - # Leds: 22
2024-04-04 02:49:07,163 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 02:49:07,196 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 02:49:07,199 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 02:49:07,231 [KlippyRest.py:_do_request()] - 503 Server Error>>Klippy Host not connected for url>>http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan%20controller_fan&heater_fan%20heatbreak_cooling_fan&output_pin%20relay&neopixel%20sb_leds&neopixel%20SKR_screen
2024-04-04 02:49:10,025 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 02:49:10,049 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 02:49:10,068 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 02:49:10,069 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-04 02:49:10,069 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 02:49:10,092 [printer.py:configure_cameras()] - Cameras: [{'name': 'Logitech', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ca5a12bb-b321-4097-81ea-35079d714b16'}]
2024-04-04 02:49:10,093 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat', 'power'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 02:49:10,093 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 02:49:11,645 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 02:49:11,709 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro M300': {'description': 'Beeper macro', 'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0'}, 'gcode_macro BEEP': {'gcode': '\nM300 P100'}, 'gcode_macro BEEP_TWICE': {'gcode': '\nM300 P100\nM300 P100'}, 'gcode_macro BEEP_LONG': {'gcode': '\nM300 P500'}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro m300': {'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0', 'description': 'Beeper macro'}, 'gcode_macro beep': {'gcode': '\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_twice': {'gcode': '\nM300 P100\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_long': {'gcode': '\nM300 P500', 'description': 'G-Code macro'}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 02:49:11,715 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 02:49:11,717 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 02:49:11,717 [printer.py:reinit()] - # Extruders: 1
2024-04-04 02:49:11,718 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 02:49:11,718 [printer.py:reinit()] - # Fans: 3
2024-04-04 02:49:11,718 [printer.py:reinit()] - # Output pins: 1
2024-04-04 02:49:11,718 [printer.py:reinit()] - # Leds: 22
2024-04-04 02:49:11,718 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 02:49:11,746 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 02:49:11,749 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 02:49:12,073 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-04 02:49:12,074 [screen.py:init_klipper()] - Printer initialized
2024-04-04 02:49:12,074 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-04 02:49:12,075 [printer.py:change_state()] - Adding callback for state: startup
2024-04-04 02:49:14,476 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-04 02:49:14,476 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 02:49:14,478 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-04 02:49:14,483 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-04 02:49:14,641 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-04 02:49:14,680 [main_menu.py:add_device()] - Adding device: extruder
2024-04-04 02:49:14,688 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-04 02:49:14,749 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 02:49:14,752 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 02:49:14,774 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-04 02:49:14,911 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-04 02:49:14,912 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 02:49:14,951 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-04 02:49:15,488 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 02:49:20,021 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 02:49:20,089 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 02:49:20,093 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 02:49:20,132 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 02:49:20,134 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 02:49:20,189 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 02:49:20,194 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 02:49:20,216 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 02:54:53,317 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=480, height=320)
2024-04-04 02:54:55,523 [base_panel.py:process_update()] - Update complete
2024-04-04 02:54:55,662 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-04-04 02:54:55,663 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-04-04 02:54:55,765 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-04-04 02:54:55,769 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 02:54:55,858 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 02:54:55,962 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-04 02:54:55,965 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 02:54:56,033 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 02:54:56,054 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-04 02:54:56,055 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 02:54:56,068 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-04 02:55:06,422 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-04 02:55:06,423 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 02:55:06,460 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-04 02:55:06,487 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-04 02:55:06,503 [_logging.py:info()] - Websocket connected
2024-04-04 02:55:06,503 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-04 02:55:06,506 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 02:55:06,534 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 02:55:06,560 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 02:55:06,561 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'on'}}
2024-04-04 02:55:06,561 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 02:55:06,588 [printer.py:configure_cameras()] - Cameras: [{'name': 'Logitech', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ca5a12bb-b321-4097-81ea-35079d714b16'}]
2024-04-04 02:55:06,589 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'power', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 02:55:06,589 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 02:55:06,619 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 02:55:06,781 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro M300': {'description': 'Beeper macro', 'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0'}, 'gcode_macro BEEP': {'gcode': '\nM300 P100'}, 'gcode_macro BEEP_TWICE': {'gcode': '\nM300 P100\nM300 P100'}, 'gcode_macro BEEP_LONG': {'gcode': '\nM300 P500'}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro m300': {'gcode': '\nSET_PIN PIN=beeper Value=1\nG4 P{params.P|default(150)|int}\nSET_PIN PIN=beeper Value=0', 'description': 'Beeper macro'}, 'gcode_macro beep': {'gcode': '\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_twice': {'gcode': '\nM300 P100\nM300 P100', 'description': 'G-Code macro'}, 'gcode_macro beep_long': {'gcode': '\nM300 P500', 'description': 'G-Code macro'}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nBEEP\nM190 S60\nBEEP_TWICE\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nBEEP\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nBEEP_TWICE\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done!!!', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME = unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME = unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 02:55:06,786 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 02:55:06,790 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 02:55:06,790 [printer.py:reinit()] - # Extruders: 1
2024-04-04 02:55:06,791 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 02:55:06,791 [printer.py:reinit()] - # Fans: 3
2024-04-04 02:55:06,791 [printer.py:reinit()] - # Output pins: 1
2024-04-04 02:55:06,792 [printer.py:reinit()] - # Leds: 22
2024-04-04 02:55:06,792 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 02:55:06,828 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 02:55:06,832 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 02:55:07,158 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-04 02:55:07,158 [screen.py:init_klipper()] - Printer initialized
2024-04-04 02:55:07,159 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-04 02:55:07,159 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 02:55:07,163 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-04 02:55:07,169 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 02:55:07,291 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-04 02:55:07,313 [main_menu.py:add_device()] - Adding device: extruder
2024-04-04 02:55:07,342 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-04 02:55:07,396 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 02:55:07,398 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 02:55:07,436 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 02:55:07,439 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 02:55:07,467 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 03:20:16,864 [base_panel.py:finish_updating()] - Finishing update
2024-04-04 03:20:16,871 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-04 03:20:16,871 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-04 03:20:16,895 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 03:41:40,963 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-04 03:41:40,964 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-04 03:41:40,967 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-04 03:41:40,968 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 03:41:40,973 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 03:41:41,035 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 03:41:41,051 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 03:41:44,425 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 03:41:44,447 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 03:41:44,467 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 03:41:44,468 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-04 03:41:44,468 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 03:41:44,489 [printer.py:configure_cameras()] - Cameras: [{'name': 'Logitech', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ca5a12bb-b321-4097-81ea-35079d714b16'}]
2024-04-04 03:41:44,490 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'power', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 03:41:44,491 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 03:41:45,447 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 03:41:45,513 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 03:41:45,519 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 03:41:45,521 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 03:41:45,522 [printer.py:reinit()] - # Extruders: 1
2024-04-04 03:41:45,522 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 03:41:45,522 [printer.py:reinit()] - # Fans: 3
2024-04-04 03:41:45,523 [printer.py:reinit()] - # Output pins: 1
2024-04-04 03:41:45,523 [printer.py:reinit()] - # Leds: 22
2024-04-04 03:41:45,524 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 03:41:45,553 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 03:41:45,556 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 03:41:45,867 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-04 03:41:45,868 [screen.py:init_klipper()] - Printer initialized
2024-04-04 03:41:45,869 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-04 03:41:45,869 [printer.py:change_state()] - Adding callback for state: startup
2024-04-04 03:41:48,315 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-04 03:41:48,316 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 03:41:48,319 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-04 03:41:48,325 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 03:41:48,448 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-04 03:41:48,468 [main_menu.py:add_device()] - Adding device: extruder
2024-04-04 03:41:48,477 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-04 03:41:48,548 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 03:41:48,550 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 03:41:48,597 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 03:41:48,600 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 03:41:48,623 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 03:41:49,327 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 03:43:50,935 [heatergraph.py:event_cb()] - Graph area: 110.54441833496094 122.82327270507812
2024-04-04 03:49:33,730 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-04 03:49:33,731 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-81-ge34205a
2024-04-04 03:49:33,731 [functions.py:log_start()] - Python version: 3.9
2024-04-04 03:49:33,877 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-04 03:49:33,878 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-04 03:49:33,899 [config.py:log_config()] -  ===== Config File =====
[printer Ender 3 NEO]
titlebar_items = MCU, pi
titlevar_name_type = full

[preheat PLA]
extruder = 210
heater_bed = 60
gcode = 
	STATUS_HEATING

[preheat BED]
heater_bed = 60
gcode = 
	STATUS_HEATING

[preheat EXTRUDER]
extruder = 200
gcode = 
	STATUS_HEATING

[preheat CALIBRATION]
extruder = 200
heater_bed = 50

[preheat COOLDOWN]
gcode = M107
	STATUS_COOLING

[menu __main ledoff]
name = LED OFF
icon = light
method = printer.gcode.script
params = {"script":"STATUS_OFF"}
=======================
2024-04-04 03:49:33,905 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
invert_y = True

=======================
2024-04-04 03:49:33,906 [config.py:__init__()] - Configured printers: [
  {
    "Ender 3 NEO": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-04 03:49:34,031 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-04 03:49:34,032 [config.py:install_language()] - Using lang en
2024-04-04 03:49:34,056 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-04 03:49:34,059 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-04 03:49:34,064 [screen.py:__init__()] - Screen resolution: 480x320
2024-04-04 03:49:34,067 [KlippyGtk.py:__init__()] - Font size: 11.0 (medium)
2024-04-04 03:49:34,472 [screen.py:show_error_modal()] - Showing error modal: Invalid config file Option "titlevar_name_type" not recognized for section "[printer Ender 3 NEO]"


2024-04-04 03:49:34,591 [KlippyGtk.py:Dialog()] - Showing dialog Error (width=480, height=320)
2024-04-04 03:49:34,601 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-04 03:49:34,612 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-04 03:49:34,622 [screen.py:initial_connection()] - Default printer: None
2024-04-04 03:49:34,701 [screen.py:connect_printer()] - Connecting to printer: Ender 3 NEO
2024-04-04 03:49:34,702 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-04 03:49:34,761 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 03:49:34,776 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-04 03:49:34,776 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 03:49:34,804 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-04 03:49:34,823 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-04 03:49:34,837 [_logging.py:info()] - Websocket connected
2024-04-04 03:49:34,838 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-04 03:49:34,840 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 03:49:34,861 [base_panel.py:set_ks_printer_cfg()] - Titlebar name type: None items: ['MCU', 'pi']
2024-04-04 03:49:34,862 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 03:49:34,880 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 03:49:34,881 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'on'}}
2024-04-04 03:49:34,882 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 03:49:34,901 [printer.py:configure_cameras()] - Cameras: [{'name': 'Logitech', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ca5a12bb-b321-4097-81ea-35079d714b16'}]
2024-04-04 03:49:34,902 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'power', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 03:49:34,903 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 03:49:34,924 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 03:49:35,002 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 03:49:35,007 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 03:49:35,009 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 03:49:35,009 [printer.py:reinit()] - # Extruders: 1
2024-04-04 03:49:35,010 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 03:49:35,010 [printer.py:reinit()] - # Fans: 3
2024-04-04 03:49:35,010 [printer.py:reinit()] - # Output pins: 1
2024-04-04 03:49:35,011 [printer.py:reinit()] - # Leds: 22
2024-04-04 03:49:35,011 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 03:49:35,042 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 03:49:35,047 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 03:49:35,384 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-04 03:49:35,384 [screen.py:init_klipper()] - Printer initialized
2024-04-04 03:49:35,385 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-04 03:49:35,385 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 03:49:35,450 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-04 03:49:35,456 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-04 03:49:35,602 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-04 03:49:35,640 [main_menu.py:add_device()] - Adding device: extruder
2024-04-04 03:49:35,649 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-04 03:49:35,702 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 03:49:35,704 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 03:49:35,745 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 03:49:35,750 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 03:49:35,773 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 03:52:39,485 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-04 03:52:39,486 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-04 03:52:39,487 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-04 03:52:39,488 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 03:52:39,493 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 03:52:39,560 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 03:52:39,576 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 03:52:42,421 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 03:52:42,441 [base_panel.py:set_ks_printer_cfg()] - Titlebar name type: None items: ['MCU', 'pi']
2024-04-04 03:52:42,441 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 03:52:42,463 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 03:52:42,463 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-04 03:52:42,464 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 03:52:42,486 [printer.py:configure_cameras()] - Cameras: [{'name': 'Logitech', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ca5a12bb-b321-4097-81ea-35079d714b16'}]
2024-04-04 03:52:42,487 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'power', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 03:52:42,487 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 03:52:43,924 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 03:52:43,985 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'color_order': 'RGB', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 03:52:43,991 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 03:52:43,993 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 03:52:43,994 [printer.py:reinit()] - # Extruders: 1
2024-04-04 03:52:43,994 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 03:52:43,995 [printer.py:reinit()] - # Fans: 3
2024-04-04 03:52:43,996 [printer.py:reinit()] - # Output pins: 1
2024-04-04 03:52:43,997 [printer.py:reinit()] - # Leds: 22
2024-04-04 03:52:43,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 03:52:44,027 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 03:52:44,030 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 03:52:44,352 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-04 03:52:44,352 [screen.py:init_klipper()] - Printer initialized
2024-04-04 03:52:44,353 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-04 03:52:44,353 [printer.py:change_state()] - Adding callback for state: startup
2024-04-04 03:52:46,745 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-04 03:52:46,746 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 03:52:46,747 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-04 03:52:46,755 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 03:52:46,903 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-04 03:52:46,935 [main_menu.py:add_device()] - Adding device: extruder
2024-04-04 03:52:46,980 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-04 03:52:47,070 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 03:52:47,073 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 03:52:47,116 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 03:52:47,120 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 03:52:47,142 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 03:52:47,756 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 03:53:21,404 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-04 03:53:21,405 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-04 03:53:21,410 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 03:53:21,412 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-04 03:53:21,412 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 03:53:21,417 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 03:53:21,477 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 03:53:24,420 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 03:53:24,443 [base_panel.py:set_ks_printer_cfg()] - Titlebar name type: None items: ['MCU', 'pi']
2024-04-04 03:53:24,443 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 03:53:24,465 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 03:53:24,465 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-04 03:53:24,466 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 03:53:24,488 [printer.py:configure_cameras()] - Cameras: [{'name': 'Logitech', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ca5a12bb-b321-4097-81ea-35079d714b16'}]
2024-04-04 03:53:24,489 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'power', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 03:53:24,489 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 03:53:25,894 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 03:53:25,960 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'color_order': 'RGB', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 03:53:25,966 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 03:53:25,969 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 03:53:25,970 [printer.py:reinit()] - # Extruders: 1
2024-04-04 03:53:25,972 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 03:53:25,972 [printer.py:reinit()] - # Fans: 3
2024-04-04 03:53:25,973 [printer.py:reinit()] - # Output pins: 1
2024-04-04 03:53:25,973 [printer.py:reinit()] - # Leds: 22
2024-04-04 03:53:25,973 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 03:53:26,005 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 03:53:26,008 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 03:53:26,317 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-04 03:53:26,318 [screen.py:init_klipper()] - Printer initialized
2024-04-04 03:53:26,318 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-04 03:53:26,319 [printer.py:change_state()] - Adding callback for state: startup
2024-04-04 03:53:28,946 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-04 03:53:28,947 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 03:53:28,949 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-04 03:53:28,954 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 03:53:29,094 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-04 03:53:29,114 [main_menu.py:add_device()] - Adding device: extruder
2024-04-04 03:53:29,140 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-04 03:53:29,201 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 03:53:29,204 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 03:53:29,243 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 03:53:29,246 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 03:53:29,270 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 03:53:29,710 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 03:53:52,299 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-04 03:53:52,300 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-04 03:53:52,305 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 03:53:52,307 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-04 03:53:52,308 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 03:53:52,312 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 03:53:52,372 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 03:53:55,420 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 03:53:55,443 [base_panel.py:set_ks_printer_cfg()] - Titlebar name type: None items: ['MCU', 'pi']
2024-04-04 03:53:55,443 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 03:53:55,465 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 03:53:55,466 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-04 03:53:55,467 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 03:53:55,491 [printer.py:configure_cameras()] - Cameras: [{'name': 'Logitech', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ca5a12bb-b321-4097-81ea-35079d714b16'}]
2024-04-04 03:53:55,491 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'power', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 03:53:55,492 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 03:53:56,655 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 03:53:56,724 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'color_order': 'RGB', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 03:53:56,731 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 03:53:56,733 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 03:53:56,734 [printer.py:reinit()] - # Extruders: 1
2024-04-04 03:53:56,735 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 03:53:56,736 [printer.py:reinit()] - # Fans: 3
2024-04-04 03:53:56,736 [printer.py:reinit()] - # Output pins: 1
2024-04-04 03:53:56,737 [printer.py:reinit()] - # Leds: 22
2024-04-04 03:53:56,737 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 03:53:56,764 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 03:53:56,767 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 03:53:57,078 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-04 03:53:57,078 [screen.py:init_klipper()] - Printer initialized
2024-04-04 03:53:57,079 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-04 03:53:57,079 [printer.py:change_state()] - Adding callback for state: startup
2024-04-04 03:53:59,485 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-04 03:53:59,486 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 03:53:59,489 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-04 03:53:59,496 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 03:53:59,634 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-04 03:53:59,661 [main_menu.py:add_device()] - Adding device: extruder
2024-04-04 03:53:59,678 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-04 03:53:59,735 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 03:53:59,737 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 03:53:59,778 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 03:53:59,781 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 03:53:59,804 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 03:54:00,497 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 04:07:46,590 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-04-04 04:07:46,593 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-04-04 04:07:46,595 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-04-04 04:07:46,599 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 04:07:46,694 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 04:07:46,787 [screen.py:connect_printer()] - Connecting to printer: Ender 3 NEO
2024-04-04 04:07:46,789 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 04:07:46,846 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 04:07:46,864 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-04 04:07:46,864 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 04:07:46,876 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-04 04:07:57,420 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-04 04:07:57,421 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 04:07:57,444 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-04 04:07:57,463 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-04 04:07:57,478 [_logging.py:info()] - Websocket connected
2024-04-04 04:07:57,478 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-04 04:07:57,481 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 04:07:57,502 [base_panel.py:set_ks_printer_cfg()] - Titlebar name type: None items: ['MCU', 'pi']
2024-04-04 04:07:57,503 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 04:07:57,523 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 04:07:57,523 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'on'}}
2024-04-04 04:07:57,524 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 04:07:57,543 [printer.py:configure_cameras()] - Cameras: [{'name': 'Logitech', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ca5a12bb-b321-4097-81ea-35079d714b16'}]
2024-04-04 04:07:57,544 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'power', 'octoprint_compat', 'update_manager', 'timelapse', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 04:07:57,545 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 04:07:57,569 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 04:07:57,815 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'color_order': 'RGB', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 04:07:57,821 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 04:07:57,825 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 04:07:57,825 [printer.py:reinit()] - # Extruders: 1
2024-04-04 04:07:57,825 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 04:07:57,825 [printer.py:reinit()] - # Fans: 3
2024-04-04 04:07:57,826 [printer.py:reinit()] - # Output pins: 1
2024-04-04 04:07:57,826 [printer.py:reinit()] - # Leds: 22
2024-04-04 04:07:57,826 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 04:07:57,853 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 04:07:57,857 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 04:07:58,154 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-04 04:07:58,155 [screen.py:init_klipper()] - Printer initialized
2024-04-04 04:07:58,155 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-04 04:07:58,155 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 04:07:58,188 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-04 04:07:58,193 [screen.py:show_panel()] - Reinitializing panel
2024-04-04 04:07:58,348 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-04 04:07:58,385 [main_menu.py:add_device()] - Adding device: extruder
2024-04-04 04:07:58,394 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-04 04:07:58,447 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 04:07:58,450 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 04:07:58,484 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 04:07:58,486 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 04:07:58,509 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 04:13:48,657 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-04 04:13:48,658 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-81-ge34205a
2024-04-04 04:13:48,659 [functions.py:log_start()] - Python version: 3.9
2024-04-04 04:13:48,819 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-04 04:13:48,821 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-04 04:13:48,843 [config.py:log_config()] -  ===== Config File =====
[printer Ender 3 NEO]
titlebar_items = MCU, pi
titlevar_name_type = full

[preheat PLA]
extruder = 210
heater_bed = 60
gcode = 
	STATUS_HEATING

[preheat BED]
heater_bed = 60
gcode = 
	STATUS_HEATING

[preheat EXTRUDER]
extruder = 200
gcode = 
	STATUS_HEATING

[preheat CALIBRATION]
extruder = 200
heater_bed = 50

[preheat COOLDOWN]
gcode = M107
	STATUS_COOLING

[menu __main ledoff]
name = LED OFF
icon = light
method = printer.gcode.script
params = {"script":"STATUS_OFF"}
=======================
2024-04-04 04:13:48,850 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
invert_y = True

=======================
2024-04-04 04:13:48,851 [config.py:__init__()] - Configured printers: [
  {
    "Ender 3 NEO": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-04 04:13:48,982 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-04 04:13:48,982 [config.py:install_language()] - Using lang en
2024-04-04 04:13:49,010 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-04 04:13:49,013 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-04 04:13:49,019 [screen.py:__init__()] - Screen resolution: 480x320
2024-04-04 04:13:49,022 [KlippyGtk.py:__init__()] - Font size: 11.0 (medium)
2024-04-04 04:13:49,435 [screen.py:show_error_modal()] - Showing error modal: Invalid config file Option "titlevar_name_type" not recognized for section "[printer Ender 3 NEO]"


2024-04-04 04:13:49,549 [KlippyGtk.py:Dialog()] - Showing dialog Error (width=480, height=320)
2024-04-04 04:13:49,558 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-04 04:13:49,571 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-04 04:13:49,583 [screen.py:initial_connection()] - Default printer: None
2024-04-04 04:13:49,664 [screen.py:connect_printer()] - Connecting to printer: Ender 3 NEO
2024-04-04 04:13:49,664 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-04 04:13:49,727 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 04:13:49,745 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-04 04:13:49,745 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 04:13:49,774 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-04 04:13:49,793 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-04 04:13:49,808 [_logging.py:info()] - Websocket connected
2024-04-04 04:13:49,809 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-04 04:13:49,811 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 04:13:49,831 [base_panel.py:set_ks_printer_cfg()] - Titlebar name type: None items: ['MCU', 'pi']
2024-04-04 04:13:49,831 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 04:13:49,851 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 04:13:49,852 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'on'}}
2024-04-04 04:13:49,853 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 04:13:49,871 [printer.py:configure_cameras()] - Cameras: [{'name': 'Logitech', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ca5a12bb-b321-4097-81ea-35079d714b16'}]
2024-04-04 04:13:49,872 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'power', 'octoprint_compat', 'update_manager', 'timelapse', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 04:13:49,872 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 04:13:49,895 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 04:13:49,997 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'color_order': 'RGB', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 04:13:50,002 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 04:13:50,004 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 04:13:50,005 [printer.py:reinit()] - # Extruders: 1
2024-04-04 04:13:50,005 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 04:13:50,005 [printer.py:reinit()] - # Fans: 3
2024-04-04 04:13:50,005 [printer.py:reinit()] - # Output pins: 1
2024-04-04 04:13:50,005 [printer.py:reinit()] - # Leds: 22
2024-04-04 04:13:50,006 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 04:13:50,033 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 04:13:50,037 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 04:13:50,390 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-04 04:13:50,390 [screen.py:init_klipper()] - Printer initialized
2024-04-04 04:13:50,391 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-04 04:13:50,391 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 04:13:50,446 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-04 04:13:50,451 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-04 04:13:50,597 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-04 04:13:50,638 [main_menu.py:add_device()] - Adding device: extruder
2024-04-04 04:13:50,647 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-04 04:13:50,700 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 04:13:50,702 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 04:13:50,742 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 04:13:50,746 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 04:13:50,769 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 04:14:12,479 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-04 04:14:12,480 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-81-ge34205a
2024-04-04 04:14:12,480 [functions.py:log_start()] - Python version: 3.9
2024-04-04 04:14:12,628 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-04 04:14:12,630 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-04 04:14:12,650 [config.py:log_config()] -  ===== Config File =====
[printer Ender 3 NEO]
titlebar_items = MCU, pi
titlebar_name_type = full

[preheat PLA]
extruder = 210
heater_bed = 60
gcode = 
	STATUS_HEATING

[preheat BED]
heater_bed = 60
gcode = 
	STATUS_HEATING

[preheat EXTRUDER]
extruder = 200
gcode = 
	STATUS_HEATING

[preheat CALIBRATION]
extruder = 200
heater_bed = 50

[preheat COOLDOWN]
gcode = M107
	STATUS_COOLING

[menu __main ledoff]
name = LED OFF
icon = light
method = printer.gcode.script
params = {"script":"STATUS_OFF"}
=======================
2024-04-04 04:14:12,655 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
invert_y = True

=======================
2024-04-04 04:14:12,657 [config.py:__init__()] - Configured printers: [
  {
    "Ender 3 NEO": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-04 04:14:12,783 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-04 04:14:12,784 [config.py:install_language()] - Using lang en
2024-04-04 04:14:12,811 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-04 04:14:12,816 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-04 04:14:12,821 [screen.py:__init__()] - Screen resolution: 480x320
2024-04-04 04:14:12,824 [KlippyGtk.py:__init__()] - Font size: 11.0 (medium)
2024-04-04 04:14:13,243 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-04 04:14:13,259 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-04 04:14:13,269 [screen.py:initial_connection()] - Default printer: None
2024-04-04 04:14:13,347 [screen.py:connect_printer()] - Connecting to printer: Ender 3 NEO
2024-04-04 04:14:13,348 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-04 04:14:13,413 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 04:14:13,436 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-04 04:14:13,437 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 04:14:13,464 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-04 04:14:13,482 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-04 04:14:13,497 [_logging.py:info()] - Websocket connected
2024-04-04 04:14:13,497 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-04 04:14:13,537 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 04:14:13,556 [base_panel.py:set_ks_printer_cfg()] - Titlebar name type: full items: ['MCU', 'pi']
2024-04-04 04:14:13,557 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 04:14:13,576 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 04:14:13,576 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'on'}}
2024-04-04 04:14:13,577 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 04:14:13,596 [printer.py:configure_cameras()] - Cameras: [{'name': 'Logitech', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ca5a12bb-b321-4097-81ea-35079d714b16'}]
2024-04-04 04:14:13,596 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'power', 'octoprint_compat', 'update_manager', 'timelapse', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 04:14:13,597 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 04:14:13,619 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 04:14:13,806 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'color_order': 'RGB', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 04:14:13,811 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 04:14:13,813 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 04:14:13,813 [printer.py:reinit()] - # Extruders: 1
2024-04-04 04:14:13,813 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 04:14:13,813 [printer.py:reinit()] - # Fans: 3
2024-04-04 04:14:13,814 [printer.py:reinit()] - # Output pins: 1
2024-04-04 04:14:13,814 [printer.py:reinit()] - # Leds: 22
2024-04-04 04:14:13,815 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 04:14:13,842 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 04:14:13,845 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 04:14:14,194 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-04 04:14:14,195 [screen.py:init_klipper()] - Printer initialized
2024-04-04 04:14:14,195 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-04 04:14:14,195 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 04:14:14,198 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-04 04:14:14,203 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-04 04:14:14,358 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-04 04:14:14,401 [main_menu.py:add_device()] - Adding device: extruder
2024-04-04 04:14:14,410 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-04 04:14:14,462 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 04:14:14,464 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 04:14:14,502 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 04:14:14,505 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 04:14:14,528 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 04:14:33,510 [screen.py:_send_action()] - printer.gcode.script: {'script': 'STATUS_OFF'}
2024-04-04 04:27:53,846 [screen.py:_load_panel()] - Loading panel: move
2024-04-04 04:27:53,976 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-04 04:27:55,887 [screen.py:_load_panel()] - Loading panel: menu
2024-04-04 04:27:56,091 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-04 04:27:56,119 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-04-04 04:27:56,124 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-04 04:27:57,153 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-04 04:28:30,500 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-04 04:28:33,816 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-04 04:28:33,853 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-04 04:28:40,844 [move.py:change_distance()] - ### Distance 50
2024-04-04 04:28:51,738 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-04-04 04:28:51,746 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-04 04:29:03,890 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-04-04 04:29:03,900 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-04 04:38:20,888 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-04 04:38:20,927 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 04:38:22,821 [screen.py:_load_panel()] - Loading panel: temperature
2024-04-04 04:38:22,870 [temperature.py:add_device()] - Adding device: extruder
2024-04-04 04:38:22,880 [temperature.py:add_device()] - Adding device: heater_bed
2024-04-04 04:38:22,890 [temperature.py:select_heater()] - Selecting extruder
2024-04-04 04:38:22,893 [temperature.py:select_heater()] - Selecting heater_bed
2024-04-04 04:38:22,943 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-04-04 04:38:26,576 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 04:38:26,576 [temperature.py:set_temperature()] - name match extruder
2024-04-04 04:38:26,577 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 04:38:26,577 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S200.0
2024-04-04 04:38:26,578 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 04:38:26,579 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 04:38:26,580 [temperature.py:validate()] - Invalid heater_bed Target:None/130.0
2024-04-04 04:38:26,678 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 04:38:26,678 [temperature.py:set_temperature()] - name match extruder
2024-04-04 04:38:26,678 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 04:38:26,679 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S200.0
2024-04-04 04:38:26,680 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 04:38:26,681 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 04:38:26,681 [temperature.py:validate()] - Invalid heater_bed Target:None/130.0
2024-04-04 04:38:26,910 [screen.py:_send_action()] - printer.gcode.script: {'script': '\nSTATUS_HEATING'}
2024-04-04 04:38:26,941 [screen.py:_send_action()] - printer.gcode.script: {'script': '\nSTATUS_HEATING'}
2024-04-04 04:39:49,224 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-04 04:39:49,260 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 04:39:56,870 [screen.py:_load_panel()] - Loading panel: extrude
2024-04-04 04:39:56,984 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-04 04:40:01,692 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2024-04-04 04:42:27,056 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-04 04:42:27,091 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 04:42:30,020 [screen.py:_send_action()] - printer.gcode.script: {'script': 'STATUS_OFF'}
2024-04-04 04:42:39,234 [screen.py:_load_panel()] - Loading panel: print
2024-04-04 04:42:39,294 [print.py:__init__()] - Thumbsize: 76.13793103448276
2024-04-04 04:42:39,298 [print.py:__init__()] - thumbs
2024-04-04 04:42:39,308 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-04-04 04:42:39,337 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-04-04 04:42:40,121 [print.py:load_files()] - Loaded in 0.516 seconds
2024-04-04 04:42:43,468 [print.py:change_sort()] - Changing from name to date
2024-04-04 04:42:45,262 [KlippyGtk.py:Dialog()] - Showing dialog Print SFS V2.0 Bracket for Ender3 V2.gcode (width=480, height=320)
2024-04-04 04:42:46,317 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-04 04:42:46,317 [print.py:confirm_print_response()] - Starting print: SFS V2.0 Bracket for Ender3 V2.gcode
2024-04-04 04:42:46,318 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-04-04 04:42:46,560 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-04 04:42:46,561 [printer.py:change_state()] - Adding callback for state: printing
2024-04-04 04:42:46,581 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-04 04:42:46,815 [job_status.py:create_status_grid()] - Titlebar items: ['MCU', 'pi']
2024-04-04 04:42:46,863 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-04 04:42:46,875 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-04 04:42:46,907 [job_status.py:update_file_metadata()] - Update Metadata. File: SFS V2.0 Bracket for Ender3 V2.gcode Size: 709273
2024-04-04 04:42:46,916 [job_status.py:show_file_thumbnail()] - SFS V2.0 Bracket for Ender3 V2.gcode
2024-04-04 05:27:02,060 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-04 05:27:02,061 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 05:27:02,091 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-04-04 05:27:02,104 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'off', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 05:17:23,094 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-04 05:17:23,096 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-81-ge34205a
2024-04-04 05:17:23,096 [functions.py:log_start()] - Python version: 3.9
2024-04-04 05:17:23,648 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-04 05:17:23,648 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-04 05:17:23,681 [config.py:log_config()] -  ===== Config File =====
[printer Ender 3 NEO]
titlebar_items = MCU, pi
titlebar_name_type = full

[preheat PLA]
extruder = 210
heater_bed = 60
gcode = 
	STATUS_HEATING

[preheat BED]
heater_bed = 60
gcode = 
	STATUS_HEATING

[preheat EXTRUDER]
extruder = 200
gcode = 
	STATUS_HEATING

[preheat CALIBRATION]
extruder = 200
heater_bed = 50

[preheat COOLDOWN]
gcode = M107
	STATUS_COOLING

[menu __main ledoff]
name = LED OFF
icon = light
method = printer.gcode.script
params = {"script":"STATUS_OFF"}
=======================
2024-04-04 05:17:23,688 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
invert_y = True
print_sort_dir = date_desc

=======================
2024-04-04 05:17:23,692 [config.py:__init__()] - Configured printers: [
  {
    "Ender 3 NEO": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-04 05:17:24,184 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-04 05:17:24,185 [config.py:install_language()] - Using lang en
2024-04-04 05:17:24,281 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-04 05:17:24,287 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-04 05:17:24,301 [screen.py:__init__()] - Screen resolution: 480x320
2024-04-04 05:17:24,331 [KlippyGtk.py:__init__()] - Font size: 11.0 (medium)
2024-04-04 05:17:26,771 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-04 05:17:26,785 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-04 05:17:26,795 [screen.py:initial_connection()] - Default printer: None
2024-04-04 05:17:26,887 [screen.py:connect_printer()] - Connecting to printer: Ender 3 NEO
2024-04-04 05:17:26,887 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-04 05:17:27,024 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-04 05:17:27,055 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-04 05:17:27,055 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 05:17:27,110 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-04 05:17:27,139 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-04 05:17:27,168 [_logging.py:info()] - Websocket connected
2024-04-04 05:17:27,169 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-04 05:17:27,229 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-04 05:17:27,254 [base_panel.py:set_ks_printer_cfg()] - Titlebar name type: full items: ['MCU', 'pi']
2024-04-04 05:17:27,255 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/device_power/devices
2024-04-04 05:17:27,275 [printer.py:configure_power_devices()] - Processing power devices: {'devices': [{'device': 'relay', 'status': 'init', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}]}
2024-04-04 05:17:27,276 [printer.py:configure_power_devices()] - Power devices: {'relay': {'status': 'off'}}
2024-04-04 05:17:27,277 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-04 05:17:27,299 [printer.py:configure_cameras()] - Cameras: [{'name': 'Logitech', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ca5a12bb-b321-4097-81ea-35079d714b16'}]
2024-04-04 05:17:27,300 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'power', 'history', 'timelapse', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-04 05:17:27,300 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-04 05:17:27,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-04 05:17:27,450 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {'default_type': 'echo'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': '10', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'neopixel SKR_screen': {'pin': 'PA15', 'chain_count': '3', 'color_order': 'RGB', 'initial_red': '0.4', 'initial_green': '0.05', 'initial_blue': '0.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)'}, 'led_effect sb_nozzle_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)'}, 'led_effect sb_critical_error': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'run_on_error': 'true'}, 'led_effect rainbow': {'autostart': 'true', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (9,10)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'led_effect set_logo_leds': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1-8)', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing'}, 'gcode_macro _bot_data': {'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'", 'gcode': '\nM118 Setting bot lapse variables'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper'}, 'menu __main __octoprint __pause': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Pause printing', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Resume printing', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'exclude_object': {}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '-27', 'position_min': '-27', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-11', 'position_min': '-11', 'position_max': '220', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '2', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-5', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'safe_z_home': {'home_xy_position': '149, 120', 'speed': '80', 'z_hop': '10', 'z_hop_speed': '5'}, 'extruder': {'max_extrude_only_distance': '350.0', 'max_extrude_cross_section': '5', 'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '22.110', 'nozzle_diameter': '0.600', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '250', 'control': 'pid', 'pid_kp': '23.249', 'pid_ki': '1.336', 'pid_kd': '101.134'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '69.714', 'pid_ki': '1.260', 'pid_kd': '964.661'}, 'heater_fan heatbreak_cooling_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50'}, 'controller_fan controller_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/ttyS0', 'restart_method': 'command', 'baud': '115200'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-39', 'y_offset': '-10', 'probe_with_touch_mode': 'True', 'pin_up_touch_mode_reports_triggered': 'True', 'stow_on_each_sample': 'False', 'z_offset': '2.220'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'a0_pin': 'PD6', 'rst_pin': 'PB9', 'encoder_pins': '^PA9, ^PA10', 'click_pin': '^!PB5', 'contrast': '63', 'spi_software_sclk_pin': 'PA5', 'spi_software_mosi_pin': 'PA7', 'spi_software_miso_pin': 'PA6'}, 'delayed_gcode welcome': {'initial_duration': '.1', 'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1'}, 'output_pin relay': {'pin': 'PC13', 'value': '1', 'shutdown_value': '0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'bed_screws': {'screw1': '23, 24', 'screw2': '191, 24', 'screw3': '191, 195', 'screw4': '23, 195'}, 'screws_tilt_adjust': {'screw1': '62, 34', 'screw1_name': 'front left screw', 'screw2': '230, 34', 'screw2_name': 'front right screw', 'screw3': '230, 205', 'screw3_name': 'rear left screw', 'screw4': '62, 205', 'screw4_name': 'rear right screw', 'horizontal_move_z': '10', 'speed': '50', 'screw_thread': 'CW-M4'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '15, 15', 'mesh_max': '190, 198', 'probe_count': '6, 6', 'algorithm': 'bicubic', 'bicubic_tension': '0.2', 'move_check_distance': '6', 'split_delta_z': '.025'}, 'gcode_arcs': {}, 'firmware_retraction': {}, 'gcode_macro Heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!'}, 'gcode_macro START_PRINT': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...'}, 'gcode_macro END_PRINT': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0'}, 'gcode_macro PURGE': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90'}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro T0': {'gcode': ''}, 'bed_mesh default': {'version': '1', 'points': '\n0.076562, 0.072656, 0.074844\n0.053906, 0.051875, 0.050781\n0.084219, 0.085312, 0.091094', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.97', 'max_x': '113.03', 'min_y': '97.3', 'max_y': '122.69999999999999'}}, 'settings': {'mcu': {'serial': '/dev/ttyS0', 'baud': 115200, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\nSTATUS_BUSY\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY) %}\n{%else %}\n{% set get_params = " " %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 10.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude|lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PA8', 'chain_count': 10, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'neopixel skr_screen': {'pin': 'PA15', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.4, 'initial_green': 0.05, 'initial_blue': 0.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.5, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 add (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (1.0, 0.18, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.1, 0.1, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 3 1 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing 3 1 top (0.6, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe 1 1.5 add (1.0, 1.0, 1.0)\nbreathing 2 0 difference (0.95, 0.0, 0.0)\nstatic 1 0 top (1.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient 0.3 1 add (0.3, 0.0, 0.0),(0.0, 9.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (9,10)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic 0 0 top (1.0, 1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1-8)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nSET_LED_EFFECT EFFECT=sb_nozzle_printing', 'description': 'G-Code macro'}, 'gcode_macro _bot_data': {'gcode': '\nM118 Setting bot lapse variables', 'description': 'G-Code macro', 'variable_lapse_video_size': '0', 'variable_lapse_filename': "'None'", 'variable_lapse_path': "'None'"}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': -27.0, 'position_min': -27.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -11.0, 'position_min': -11.0, 'position_max': 220.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 2.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'safe_z_home': {'home_xy_position': [149.0, 120.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 80.0, 'move_to_previous': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.249, 'pid_ki': 1.336, 'pid_kd': 101.134, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 179.60472924917235, 'max_extrude_only_accel': 1796.0472924917235, 'max_extrude_only_distance': 350.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 22.11, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 69.714, 'pid_ki': 1.26, 'pid_kd': 964.661, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan heatbreak_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'bltouch': {'z_offset': 2.22, 'stow_on_each_sample': False, 'probe_with_touch_mode': True, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -39.0, 'y_offset': -10.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'PB8', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'PA5', 'spi_software_miso_pin': 'PA6', 'spi_software_mosi_pin': 'PA7', 'a0_pin': 'PD6', 'contrast': 63, 'rst_pin': 'PB9', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA9, ^PA10', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PB5', 'display_group': '_default_16x4'}, 'menu __main __octoprint': {'type': 'list', 'name': 'Klipper', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'command', 'name': 'Pause printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nPAUSE'}, 'menu __main __octoprint __resume': {'type': 'command', 'name': 'Resume printing', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nRESUME'}, 'menu __main __octoprint __abort': {'type': 'command', 'name': 'Abort printing', 'enable': '{printer.idle_timeout.state == "Printing"}', 'gcode': '\nCANCEL_PRINT'}, 'delayed_gcode welcome': {'gcode': '\nSET_LED LED=SKR_screen RED=0.5 GREEN=0.0 BLUE=0.0 TRANSMIT=0\nSET_LED LED=SKR_screen RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=1', 'initial_duration': 0.1}, 'output_pin relay': {'pwm': False, 'pin': 'PC13', 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'bed_screws': {'screw1': [23.0, 24.0], 'screw1_name': 'screw at 23.000,24.000', 'screw2': [191.0, 24.0], 'screw2_name': 'screw at 191.000,24.000', 'screw3': [191.0, 195.0], 'screw3_name': 'screw at 191.000,195.000', 'screw4': [23.0, 195.0], 'screw4_name': 'screw at 23.000,195.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [62.0, 34.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 34.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 205.0], 'screw3_name': 'rear left screw', 'screw4': [62.0, 205.0], 'screw4_name': 'rear right screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 50.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [15.0, 15.0], 'mesh_max': [190.0, 198.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 6.0}, 'bed_mesh default': {'version': 1, 'points': [[0.076562, 0.072656, 0.074844], [0.053906, 0.051875, 0.050781], [0.084219, 0.085312, 0.091094]], 'min_x': 106.97, 'max_x': 113.03, 'min_y': 97.3, 'max_y': 122.69999999999999, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_arcs': {'resolution': 1.0}, 'firmware_retraction': {'retract_length': 0.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'gcode_macro heat_to_remove': {'gcode': '\nSTATUS_HEATING\nM140 S60\nM117 Heating bed to remove print...\nM190 S60\nM117 Done heating!!!', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\nG92 E0\nG28\nSTATUS_HEATING\nM104 S{180}\nM140 S{50}\nM190 S{50}\nBED_MESH_CALIBRATE\n\nSMART_PARK\nM104 S{params.EXTRUDER_TEMP}\nM140 S{params.BED_TEMP}\nSTATUS_HEATING\nM190 S{params.BED_TEMP}\nLINE_PURGE\nSTATUS_PRINTING\nG92 E0\nG1 Z2.0 F3000\nG1 X5 Y20 Z0.3 F5000.0\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\nG91\nG1 E-5 F2700\nG1 E-2 Z0.2 F2400\nG1 X5 Y5 F3000\nG1 Z10\nG90\nG1 X0 Y210\nM106 S0\nM104 S0\nM140 S0\nM84 X Y E\nBED_MESH_CLEAR\nSTATUS_PART_READY\nM117 Done Printing!!!\nM104 S{150}\nM117 Waiting until cooldown to shutdown\nM104 S{45}\nSET_PIN PIN=relay VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro purge': {'gcode': '\nM117 PURGING...\nG91\nG1 E45.0 F250\nG90', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nBEEP\nG92 E0\nG1 E25 F{speed}\nG1 E-350 F{max_velocity}\nBEEP_TWICE\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-04 05:17:27,469 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-04 05:17:27,483 [printer.py:reinit()] - Klipper version: v0.12.0-139-g75a40e81-dirty
2024-04-04 05:17:27,483 [printer.py:reinit()] - # Extruders: 1
2024-04-04 05:17:27,484 [printer.py:reinit()] - # Temperature devices: 1
2024-04-04 05:17:27,484 [printer.py:reinit()] - # Fans: 3
2024-04-04 05:17:27,485 [printer.py:reinit()] - # Output pins: 1
2024-04-04 05:17:27,485 [printer.py:reinit()] - # Leds: 22
2024-04-04 05:17:27,486 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-04 05:17:27,564 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-04 05:17:27,569 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan controller_fan&heater_fan heatbreak_cooling_fan&output_pin relay&neopixel sb_leds&neopixel SKR_screen
2024-04-04 05:17:27,702 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-04 05:17:27,703 [screen.py:init_klipper()] - Printer initialized
2024-04-04 05:17:27,704 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-04 05:17:27,705 [printer.py:change_state()] - Adding callback for state: ready
2024-04-04 05:17:27,713 [screen.py:_websocket_callback()] - Power status changed: {'device': 'relay', 'status': 'on', 'locked_while_printing': False, 'type': 'klipper_device', 'is_shutdown': False}
2024-04-04 05:17:27,716 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-04 05:17:27,728 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-04 05:17:28,333 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-04 05:17:28,356 [main_menu.py:add_device()] - Adding device: extruder
2024-04-04 05:17:28,556 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-04 05:17:28,660 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 05:17:28,663 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-04 05:17:28,708 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-04-04 05:17:28,712 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-04 05:17:28,747 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-04 05:17:35,836 [screen.py:_load_panel()] - Loading panel: extrude
2024-04-04 05:17:35,939 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-04 05:17:37,067 [screen.py:_load_panel()] - Loading panel: temperature
2024-04-04 05:17:37,096 [temperature.py:add_device()] - Adding device: extruder
2024-04-04 05:17:37,106 [temperature.py:add_device()] - Adding device: heater_bed
2024-04-04 05:17:37,116 [temperature.py:select_heater()] - Selecting extruder
2024-04-04 05:17:37,118 [temperature.py:select_heater()] - Selecting heater_bed
2024-04-04 05:17:37,170 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-04-04 05:17:39,907 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 05:17:39,908 [temperature.py:set_temperature()] - name match extruder
2024-04-04 05:17:39,908 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 05:17:39,909 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S200.0
2024-04-04 05:17:39,911 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 05:17:39,912 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 05:17:39,913 [temperature.py:validate()] - Invalid heater_bed Target:None/130.0
2024-04-04 05:17:40,122 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 05:17:40,123 [temperature.py:set_temperature()] - name match extruder
2024-04-04 05:17:40,124 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 05:17:40,124 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S200.0
2024-04-04 05:17:40,126 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 05:17:40,127 [temperature.py:set_temperature()] - {'extruder': 200.0, 'gcode': '\nSTATUS_HEATING'}
2024-04-04 05:17:40,127 [temperature.py:validate()] - Invalid heater_bed Target:None/130.0
2024-04-04 05:17:40,184 [screen.py:_send_action()] - printer.gcode.script: {'script': '\nSTATUS_HEATING'}
2024-04-04 05:17:40,415 [screen.py:_send_action()] - printer.gcode.script: {'script': '\nSTATUS_HEATING'}
2024-04-04 05:17:41,511 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-04 05:17:41,551 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-04 06:23:20,845 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-04 06:23:20,918 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 06:23:24,554 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-04 06:23:24,591 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2024-04-04 06:23:25,276 [screen.py:show_popup_message()] - error: // Unknown command:"BEEP"
2024-04-04 06:23:33,986 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2024-04-04 06:24:17,114 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-04 06:24:17,153 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 06:24:19,886 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-04 06:24:19,887 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-04 06:24:19,895 [screen.py:_load_panel()] - Loading panel: menu
2024-04-04 06:24:20,371 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-04 06:24:20,447 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-04 06:24:20,463 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-04 06:24:36,035 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-04 06:24:36,095 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 06:24:39,210 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-04 06:24:39,211 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-04 06:24:39,259 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-04 06:24:39,331 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-04 06:24:39,348 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-04 06:24:41,306 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-04 06:24:41,346 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 06:24:42,174 [screen.py:_send_action()] - printer.gcode.script: {'script': 'STATUS_OFF'}
2024-04-04 06:24:45,705 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-04 06:24:45,705 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-04 06:24:45,754 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-04 06:24:45,823 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-04 06:24:45,839 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-04 06:24:49,627 [screen.py:_load_panel()] - Loading panel: console
2024-04-04 06:24:49,735 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-04-04 06:25:07,456 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-04 06:25:07,535 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-04 06:25:10,090 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-04 06:25:10,090 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-04 06:25:10,140 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-04 06:25:10,210 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-04 06:25:10,225 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-04 06:25:16,952 [screen.py:_load_panel()] - Loading panel: shutdown
2024-04-04 06:25:17,012 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > shutdown
2024-04-04 06:25:18,894 [shutdown.py:reboot_poweroff()] - http://127.0.0.1:7125
2024-04-04 06:25:18,922 [KlippyGtk.py:Dialog()] - Showing dialog Restart (width=480, height=320)
2024-04-04 06:25:20,172 [KlippyGtk.py:remove_dialog()] - Removing Dialog
